/*
 * Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*
 * @test
 * @bug 8241625 8241895 8242326
 * @summary test the lists generated by the doclet
 * @library  /tools/lib ../../lib
 * @modules  jdk.javadoc/jdk.javadoc.internal.tool
 * @build    toolbox.ToolBox javadoc.tester.*
 * @run main TestLists
 */

import java.io.IOException;
import java.nio.file.Path;

import javadoc.tester.JavadocTester;
import toolbox.ToolBox;

public class TestLists extends JavadocTester {

    public static void main(String... args) throws Exception {
        TestLists tester = new TestLists();
        tester.runTests(m -> new Object[]{Path.of(m.getName())});
    }

    private final ToolBox tb = new ToolBox();

    @Test
    public void testMemberLists(Path base) throws IOException {
        Path src = base.resolve("src");
        tb.writeJavaFiles(src,
                "package p; public class C {\n"
                + "  public C() { }\n"
                + "  public C(int i) { }\n"
                + "  public int f1;\n"
                + "  public int f2;\n"
                + "  public void m1() { }\n"
                + "  public void m2() { }\n"
                + "}\n",
                "package p; public enum E { E1, E2 }\n",
                "package p; public @interface A { int value(); }\n"
        );

        javadoc("-d", base.resolve("out").toString(),
                "-sourcepath", src.toString(),
                "p");
        checkExit(Exit.OK);

        checkOutput("p/C.html", true,
                "<h2>Field Details</h2>\n"
                + "<ul class=\"member-list\">\n"
                + "<li>\n"
                + "<section class=\"detail\" id=\"f1\">\n"
                + "<h3>f1</h3>\n",
                "<h2>Constructor Details</h2>\n"
                + "<ul class=\"member-list\">\n"
                + "<li>\n"
                + "<section class=\"detail\" id=\"&lt;init&gt;()\">\n"
                + "<h3>C</h3>",
                "<section class=\"method-details\" id=\"method.detail\">\n"
                + "<h2>Method Details</h2>\n"
                + "<ul class=\"member-list\">\n"
                + "<li>\n"
                + "<section class=\"detail\" id=\"m1()\">\n"
                + "<h3>m1</h3>\n");

        checkOutput("p/E.html", true,
                "<h2>Enum Constant Details</h2>\n"
                + "<ul class=\"member-list\">\n"
                + "<li>\n"
                + "<section class=\"detail\" id=\"E1\">\n");

        checkOutput("p/A.html", true,
                "<h2>Element Details</h2>\n"
                + "<ul class=\"member-list\">\n"
                + "<li>\n"
                + "<section class=\"detail\" id=\"value()\">");
    }

    @Test
    public void testDetailLists(Path base) throws IOException {
        Path src = base.resolve("src");
        tb.writeJavaFiles(src,
                "package p; public class C {\n"
                + "  public C() { }\n"
                + "  public C(int i) { }\n"
                + "  public int f1;\n"
                + "  public int f2;\n"
                + "  public void m1() { }\n"
                + "  public void m2() { }\n"
                + "}\n",
                "package p; public enum E { E1, E2 }\n",
                "package p; public @interface A { int value(); }\n"
        );

        javadoc("-d", base.resolve("out").toString(),
                "-sourcepath", src.toString(),
                "p");
        checkExit(Exit.OK);

        checkOutput("p/C.html", true,
                "<section class=\"details\">\n"
                + "<ul class=\"details-list\">\n"
                + "<!-- ============ FIELD DETAIL =========== -->\n"
                + "<li>\n"
                + "<section class=\"field-details\" id=\"field.detail\">\n"
                + "<h2>Field Details</h2>\n"
                + "<ul class=\"member-list\">",
                "</ul>\n"
                + "</section>\n"
                + "</li>\n"
                + "<!-- ========= CONSTRUCTOR DETAIL ======== -->\n"
                + "<li>\n"
                + "<section class=\"constructor-details\" id=\"constructor.detail\">\n"
                + "<h2>Constructor Details</h2>\n"
                + "<ul class=\"member-list\">");

        checkOutput("p/E.html", true,
                "<section class=\"details\">\n"
                + "<ul class=\"details-list\">\n"
                + "<!-- ============ ENUM CONSTANT DETAIL =========== -->\n"
                + "<li>\n"
                + "<section class=\"constant-details\" id=\"enum.constant.detail\">\n"
                + "<h2>Enum Constant Details</h2>\n"
                + "<ul class=\"member-list\">");

        checkOutput("p/A.html", true,
                "<ul class=\"details-list\">\n"
                + "<!-- ============ ANNOTATION TYPE MEMBER DETAIL =========== -->\n"
                + "<li>\n"
                + "<section class=\"member-details\">\n"
                + "<h2>Element Details</h2>\n"
                + "<ul class=\"member-list\">");
    }

    @Test
    public void testSummaryLists(Path base) throws IOException {
        Path src = base.resolve("src");
        tb.writeJavaFiles(src,
                "package p; public class C {\n"
                        + "  public C() { }\n"
                        + "  public C(int i) { }\n"
                        + "  public int f1;\n"
                        + "  public int f2;\n"
                        + "  public void m1() { }\n"
                        + "  public void m2() { }\n"
                        + "}\n",
                "package p; public enum E { E1, E2 }\n",
                "package p; public @interface A { int value(); }\n"
        );

        javadoc("-d", base.resolve("out").toString(),
                "-sourcepath", src.toString(),
                "p");
        checkExit(Exit.OK);

        checkOutput("p/C.html", true,
                "<section class=\"summary\">\n"
                + "<ul class=\"summary-list\">\n"
                + "<!-- =========== FIELD SUMMARY =========== -->\n"
                + "<li>\n"
                + "<section class=\"field-summary\" id=\"field.summary\">\n"
                + "<h2>Field Summary</h2>\n"
                + "<div class=\"member-summary\">\n"
                + "<table>",
                "</section>\n"
                + "</li>\n"
                + "<!-- ======== CONSTRUCTOR SUMMARY ======== -->\n"
                + "<li>\n"
                + "<section class=\"constructor-summary\" id=\"constructor.summary\">\n"
                + "<h2>Constructor Summary</h2>\n"
                + "<div class=\"member-summary\">\n"
                + "<table>");

        checkOutput("p/E.html", true,
                "</section>\n"
                + "</li>\n"
                + "<!-- =========== ENUM CONSTANT SUMMARY =========== -->\n"
                + "<li>\n"
                + "<section class=\"constants-summary\" id=\"enum.constant.summary\">\n"
                + "<h2>Enum Constant Summary</h2>\n"
                + "<div class=\"member-summary\">\n"
                + "<table>");

        checkOutput("p/A.html", true,
                "<section class=\"summary\">\n"
                + "<ul class=\"summary-list\">\n"
                + "<!-- =========== ANNOTATION TYPE REQUIRED MEMBER SUMMARY =========== -->\n"
                + "<li>\n"
                + "<section class=\"member-summary\" id=\"annotation.type.required.element.summary\">\n"
                + "<h2>Required Element Summary</h2>\n"
                + "<div class=\"member-summary\">\n"
                + "<table>");

    }
}
