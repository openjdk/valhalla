/*
 * Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 *
 */

package compiler/valhalla/inlinetypes;

public final primitive value class FooValue
    version 63:0
{
    public final Field x:I;
    public final Field y:I;

    // escape with putstatic
    @+compiler/lib/ir_framework/ForceInline{}
    static Method test1:"()Qcompiler/valhalla/inlinetypes/FooValue;" stack 2 locals 1 {
        aconst_init FooValue; astore_0;
        aload_0; iconst_1; withfield x:I; astore_0;
        aload_0; iconst_1; withfield y:I; astore_0;
        
        aload_0; putstatic TestWithfieldC1.foo_static:"Lcompiler/valhalla/inlinetypes/FooValue;";
        
        aload_0; iconst_2; withfield x:I; astore_0;
        aload_0; iconst_2; withfield y:I; astore_0;
        
        aload_0; areturn;
    }

    // escape with putfield
    @+compiler/lib/ir_framework/ForceInline{}
    static Method test2:"(Lcompiler/valhalla/inlinetypes/TestWithfieldC1;)Qcompiler/valhalla/inlinetypes/FooValue;" stack 2 locals 2 {
        aconst_init FooValue; astore_1;
        aload_1; iconst_1; withfield FooValue.x:I; astore_1;
        aload_1; iconst_1; withfield FooValue.y:I; astore_1;
        
        aload_0; aload_1; putfield TestWithfieldC1.foo_instance:"Lcompiler/valhalla/inlinetypes/FooValue;";
        
        aload_1; iconst_2; withfield x:I; astore_1;
        aload_1; iconst_2; withfield y:I; astore_1;
        
        aload_1; areturn;
    }

    // escape with function call
    @+compiler/lib/ir_framework/ForceInline{}
    static Method test3:"()Qcompiler/valhalla/inlinetypes/FooValue;" stack 2 locals 1 {
        aconst_init FooValue; astore_0;
        aload_0; iconst_1; withfield x:I; astore_0;
        aload_0; iconst_1; withfield y:I; astore_0;
        
        aload_0; invokestatic TestWithfieldC1.set_foo_static_if_null:"(Qcompiler/valhalla/inlinetypes/FooValue;)V";
        
        aload_0; iconst_2; withfield x:I; astore_0;
        aload_0; iconst_2; withfield y:I; astore_0;
        
        aload_0; areturn;
    }

    // escape and then branch backwards
    @+compiler/lib/ir_framework/ForceInline{}
    static Method test4:"()Qcompiler/valhalla/inlinetypes/FooValue;" stack 2 locals 2 {
        aconst_init FooValue; astore_0;
        iconst_1; istore_1;
        
        loop: stack_frame_type append; locals_map class "Qcompiler/valhalla/inlinetypes/FooValue;", int;
            // iterate two times
            iload_1; iconst_2; if_icmpgt end;
            
            aload_0; iload_1; withfield x:I; astore_0;
            aload_0; iload_1; withfield y:I; astore_0;
            
            aload_0; invokestatic TestWithfieldC1.set_foo_static_if_null:"(Qcompiler/valhalla/inlinetypes/FooValue;)V";
            
            iinc 1,1; goto loop;
        
        end: stack_frame_type same;
            aload_0; areturn;
    }

    // escape using a different local variable
    @+compiler/lib/ir_framework/ForceInline{}
    static Method test5:"()Qcompiler/valhalla/inlinetypes/FooValue;" stack 2 locals 2 {
        aconst_init FooValue; astore_0;
        aconst_init FooValue; astore_1;
        aload_0; astore_1;
        
        aload_0; iconst_1; withfield x:I; astore_0;
        aload_0; iconst_1; withfield y:I; astore_0;
        
        aload_0; invokestatic TestWithfieldC1.set_foo_static_if_null:"(Qcompiler/valhalla/inlinetypes/FooValue;)V";
        
        aload_1; iconst_2; withfield x:I; astore_1;
        aload_1; iconst_2; withfield y:I; astore_1;
        
        aload_1; areturn;
    }
    
    // escape using aastore
    @+compiler/lib/ir_framework/ForceInline{}
    static Method test6:"()Qcompiler/valhalla/inlinetypes/FooValue;" stack 3 locals 1 {
        aconst_init FooValue; astore_0;
        aload_0; iconst_1; withfield x:I; astore_0;
        aload_0; iconst_1; withfield y:I; astore_0;
        
        getstatic TestWithfieldC1.foo_static_arr:"[Lcompiler/valhalla/inlinetypes/FooValue;";
        iconst_0; aload_0; aastore;
        
        aload_0; iconst_2; withfield x:I; astore_0;
        aload_0; iconst_2; withfield y:I; astore_0;
        
        aload_0; areturn;
    }

    // Copying a value into different local slots -- disable withfield optimization
    @+compiler/lib/ir_framework/ForceInline{}
    static Method test7:"()Qcompiler/valhalla/inlinetypes/FooValue;" stack 2 locals 2 {
        aconst_init FooValue; astore_0;
        aconst_init FooValue; astore_1;
        aload_0; astore_1;
        
        aload_0; iconst_1; withfield x:I; astore_0;
        aload_0; iconst_1; withfield y:I; astore_0;
        
        aload_1; iconst_2; withfield x:I; astore_1;
        aload_1; iconst_2; withfield y:I; astore_1;
        
        aload_0; areturn;
    }

    // escape by invoking non-static method
    @+compiler/lib/ir_framework/ForceInline{}
    static Method test8:"()Qcompiler/valhalla/inlinetypes/FooValue;" stack 2 locals 1 {
        aconst_init FooValue; astore_0;
        aload_0; iconst_1; withfield x:I; astore_0;
        aload_0; iconst_1; withfield y:I; astore_0;
        
        aload_0; invokevirtual non_static_method:"()V";
        
        aload_0; iconst_2; withfield x:I; astore_0;
        aload_0; iconst_2; withfield y:I; astore_0;
        
        aload_0; areturn;
    }
    
    @+compiler/lib/ir_framework/DontInline{}
    private Method non_static_method:"()V" stack 1 {
        aload_0;
        invokestatic TestWithfieldC1.set_foo_static_if_null:"(Qcompiler/valhalla/inlinetypes/FooValue;)V";
        return;
    }
    
    // duplicate reference with local variables
    @+compiler/lib/ir_framework/ForceInline{}
    static Method test9:"(Lcompiler/valhalla/inlinetypes/TestWithfieldC1;)Qcompiler/valhalla/inlinetypes/FooValue;" stack 2 locals 3 {
        aconst_init FooValue; astore_1;
        aload_1; iconst_1; withfield x:I; astore_1;
        aload_1; iconst_1; withfield y:I; astore_1;
        
        aload_1; astore_2;
        
        aload_1; iconst_2; withfield x:I; astore_1;
        aload_1; iconst_2; withfield y:I; astore_1;
        
        aload_2; iconst_3; withfield x:I; astore_2;
        aload_2; iconst_3; withfield y:I; astore_2;
        
        aload_0; aload_2; putfield TestWithfieldC1.foo_instance:"Lcompiler/valhalla/inlinetypes/FooValue;";

        aload_1; areturn;
    }

}
