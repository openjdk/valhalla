/*
 * Copyright (c) 2023, Red Hat, Inc. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

super public class MissingSafepointOnSwitch
	version 52:0
{
  public Method "<init>":"()V"
	stack 1 locals 1
  {
		aload_0;
		invokespecial	Method java/lang/Object."<init>":"()V";
		return;
  }
  /* Same as:
    public static void test(boolean flag, int v) {
        if (flag) {
            loop:
            for (; ; ) {
                switch(v) {
                    case 0:
                    case 1:
                    case 2:
                        break loop;
                    default:
                }
            }
        }
    }
    but with the default: set to the loop entry
  */
  public static Method test:"(ZI)V"
	stack 1 locals 2
  {
		iload_0;
		ifeq	L32;
	L4:	stack_frame_type same;
		iload_1;
		tableswitch{ //0 to 2
		0: L32;
		1: L32;
		2: L32;
		default: L4 };
	L32:	stack_frame_type same;
		return;
  }

} // end Class TestMissingSafepointOnSwitch
