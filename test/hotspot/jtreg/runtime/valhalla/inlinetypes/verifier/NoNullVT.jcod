/*
 * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 *
 */

// Test that a VerifyError exception is thrown when trying to pass a null
// when the formal parameter is an inline type.
//
// // Java program emulating the jcod contents.
// public inline final class NoNullVT {
//     final int x;
//     final int y;
//
//     private NoNullVT() {
//         x = 0;
//         y = 0;
//     }
//
//     public int getX() { return x; }
//     public int getY() { return y; }
//
//     public boolean isSameNoNullVT(NoNullVT that) {
//         return this.getX() == that.getX() && this.getY() == that.getY();
//     }
//
//     public boolean equals(Object o) {
//         if(o instanceof NoNullVT) {
//             return ((NoNullVT)o).x == x &&  ((NoNullVT)o).y == y;
//         } else {
//             return false;
//         }
//     }
//
//     public static NoNullVT createNoNullVT(int x, int y) {
//         NoNullVT p = NoNullVT.default;
//         p = __WithField(p.x, x);
//         p = __WithField(p.y, y);
//         return p;
//     }
//
//     public static void main(String[] args) {
//         String str = null;
//         NoNullVT a = createNoNullVT(3, 4);
//         NoNullVT b = createNoNullVT(2, 4);
//         boolean res = a.isSameNoNullVT(null); // Should throw VerifyError
//     }
// }

class NoNullVT {
  0xCAFEBABE;
  0; // minor version
  61; // version
  [63] { // Constant Pool
    ; // first element is empty
    class #36; // #1     at 0x0A
    Field #1 #37; // #2     at 0x0D
    Field #1 #38; // #3     at 0x12
    Method #1 #39; // #4     at 0x17
    Method #1 #40; // #5     at 0x1C
    class #41; // #6     at 0x21
    Method #1 #42; // #7     at 0x24
    Method #1 #43; // #8     at 0x29
    InvokeDynamic 0s #46; // #9     at 0x2E
    InvokeDynamic 0s #47; // #10     at 0x33
    class #48; // #11     at 0x38
    Utf8 "x"; // #12     at 0x3B
    Utf8 "I"; // #13     at 0x3F
    Utf8 "y"; // #14     at 0x43
    Utf8 "getX"; // #15     at 0x47
    Utf8 "()I"; // #16     at 0x4E
    Utf8 "Code"; // #17     at 0x54
    Utf8 "LineNumberTable"; // #18     at 0x5B
    Utf8 "getY"; // #19     at 0x6D
    Utf8 "isSameNoNullVT"; // #20     at 0x74
    Utf8 "(QNoNullVT;)Z"; // #21     at 0x85
    Utf8 "StackMapTable"; // #22     at 0x95
    Utf8 "equals"; // #23     at 0xA5
    Utf8 "(Ljava/lang/Object;)Z"; // #24     at 0xAE
    Utf8 "createNoNullVT"; // #25     at 0xC6
    Utf8 "(II)QNoNullVT;"; // #26     at 0xD7
    Utf8 "main"; // #27     at 0xE8
    Utf8 "([Ljava/lang/String;)V"; // #28     at 0xEF
    Utf8 "hashCode"; // #29     at 0x0108
    Utf8 "toString"; // #30     at 0x0113
    Utf8 "()Ljava/lang/String;"; // #31     at 0x011E
    Utf8 "<init>"; // #32     at 0x0135
    Utf8 "()QNoNullVT;"; // #33     at 0x013E
    Utf8 "SourceFile"; // #34     at 0x014D
    Utf8 "NoNullVT.java"; // #35     at 0x015A
    Utf8 "NoNullVT"; // #36     at 0x016A
    NameAndType #12 #13; // #37     at 0x0175
    NameAndType #14 #13; // #38     at 0x017A
    NameAndType #15 #16; // #39     at 0x017F
    NameAndType #19 #16; // #40     at 0x0184
    Utf8 "QNoNullVT;"; // #41     at 0x0189
    NameAndType #25 #26; // #42     at 0x0196
    NameAndType #20 #21; // #43     at 0x019B
    Utf8 "BootstrapMethods"; // #44     at 0x01A0
    MethodHandle 6b #49; // #45     at 0x01B3
    NameAndType #29 #50; // #46     at 0x01B7
    NameAndType #30 #51; // #47     at 0x01BC
    Utf8 "java/lang/Object"; // #48     at 0x01C1
    Method #52 #53; // #49     at 0x01D4
    Utf8 "(QNoNullVT;)I"; // #50     at 0x01D9
    Utf8 "(QNoNullVT;)Ljava/lang/String;"; // #51     at 0x01E9
    class #54; // #52     at 0x020A
    NameAndType #55 #59; // #53     at 0x020D
    Utf8 "java/lang/invoke/ValueBootstrapMethods"; // #54     at 0x0212
    Utf8 "makeBootstrapMethod"; // #55     at 0x023B
    class #61; // #56     at 0x0251
    Utf8 "Lookup"; // #57     at 0x0254
    Utf8 "InnerClasses"; // #58     at 0x025D
    Utf8 "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"; // #59     at 0x026C
    class #62; // #60     at 0x02E2
    Utf8 "java/lang/invoke/MethodHandles$Lookup"; // #61     at 0x02E5
    Utf8 "java/lang/invoke/MethodHandles"; // #62     at 0x030D
  } // Constant Pool

  0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
  #1;// this_cpx
  #11;// super_cpx

  [0] { // Interfaces
  } // Interfaces

  [2] { // fields
    { // Member at 0x0338
      0x0010; // access
      #12; // name_cpx
      #13; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
    ;
    { // Member at 0x0340
      0x0010; // access
      #14; // name_cpx
      #13; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
  } // fields

  [9] { // methods
    { // Member at 0x034A
      0x0001; // access
      #15; // name_cpx
      #16; // sig_cpx
      [1] { // Attributes
        Attr(#17, 29) { // Code at 0x0352
          1; // max_stack
          1; // max_locals
          Bytes[5]{
            0x2AB40002AC;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#18, 6) { // LineNumberTable at 0x0369
              [1] { // LineNumberTable
                0  10; //  at 0x0375
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x0375
      0x0001; // access
      #19; // name_cpx
      #16; // sig_cpx
      [1] { // Attributes
        Attr(#17, 29) { // Code at 0x037D
          1; // max_stack
          1; // max_locals
          Bytes[5]{
            0x2AB40003AC;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#18, 6) { // LineNumberTable at 0x0394
              [1] { // LineNumberTable
                0  11; //  at 0x03A0
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x03A0
      0x0001; // access
      #20; // name_cpx
      #21; // sig_cpx
      [1] { // Attributes
        Attr(#17, 63) { // Code at 0x03A8
          2; // max_stack
          2; // max_locals
          Bytes[28]{
            0x2AB600042BB60004;
            0xA000122AB600052B;
            0xB60005A0000704A7;
            0x000403AC;
          };
          [0] { // Traps
          } // end Traps
          [2] { // Attributes
            Attr(#18, 6) { // LineNumberTable at 0x03D6
              [1] { // LineNumberTable
                0  14; //  at 0x03E2
              }
            } // end LineNumberTable
            ;
            Attr(#22, 5) { // StackMapTable at 0x03E2
              [2] { // 
                26b; // same_frame
                64b, [1]z{1b}; // same_locals_1_stack_item_frame
              }
            } // end StackMapTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x03ED
      0x0001; // access
      #23; // name_cpx
      #24; // sig_cpx
      [1] { // Attributes
        Attr(#17, 87) { // Code at 0x03F5
          2; // max_stack
          2; // max_locals
          Bytes[43]{
            0x2BC100019900252B;
            0xC00006B400022AB4;
            0x0002A000152BC000;
            0x06B400032AB40003;
            0xA0000704A7000403;
            0xAC03AC;
          };
          [0] { // Traps
          } // end Traps
          [2] { // Attributes
            Attr(#18, 14) { // LineNumberTable at 0x0432
              [3] { // LineNumberTable
                0  18; //  at 0x043E
                7  19; //  at 0x0442
                41  21; //  at 0x0446
              }
            } // end LineNumberTable
            ;
            Attr(#22, 6) { // StackMapTable at 0x0446
              [3] { // 
                39b; // same_frame
                64b, [1]z{1b}; // same_locals_1_stack_item_frame
                0b; // same_frame
              }
            } // end StackMapTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x0452
      0x0009; // access
      #25; // name_cpx
      #26; // sig_cpx
      [1] { // Attributes
        Attr(#17, 56) { // Code at 0x045A
          2; // max_stack
          3; // max_locals
          Bytes[20]{
            0xCB00014D1A2C5FCC;
            0x00024D1B2C5FCC00;
            0x034D2CB0;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#18, 18) { // LineNumberTable at 0x0480
              [4] { // LineNumberTable
                0  26; //  at 0x048C
                4  27; //  at 0x0490
                11  28; //  at 0x0494
                18  29; //  at 0x0498
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x0498
      0x0009; // access
      #27; // name_cpx
      #28; // sig_cpx
      [1] { // Attributes
        Attr(#17, 62) { // Code at 0x04A0
          2; // max_stack
          5; // max_locals
          Bytes[22]{
            0x014C0607B800074D;
            0x0507B800074E2C2B; // Change last nibble from C to B to load null
            0xB600083604B1;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#18, 22) { // LineNumberTable at 0x04C8
              [5] { // LineNumberTable
                0  33; //  at 0x04D4
                2  34; //  at 0x04D8
                8  35; //  at 0x04DC
                14  36; //  at 0x04E0
                21  37; //  at 0x04E4
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x04E4
      0x0011; // access
      #29; // name_cpx
      #16; // sig_cpx
      [1] { // Attributes
        Attr(#17, 31) { // Code at 0x04EC
          1; // max_stack
          1; // max_locals
          Bytes[7]{
            0x2ABA00090000AC;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#18, 6) { // LineNumberTable at 0x0505
              [1] { // LineNumberTable
                0  1; //  at 0x0511
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x0511
      0x0011; // access
      #30; // name_cpx
      #31; // sig_cpx
      [1] { // Attributes
        Attr(#17, 31) { // Code at 0x0519
          1; // max_stack
          1; // max_locals
          Bytes[7]{
            0x2ABA000A0000B0;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#18, 6) { // LineNumberTable at 0x0532
              [1] { // LineNumberTable
                0  1; //  at 0x053E
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x053E
      0x000A; // access
      #32; // name_cpx
      #33; // sig_cpx
      [1] { // Attributes
        Attr(#17, 56) { // Code at 0x0546
          2; // max_stack
          1; // max_locals
          Bytes[20]{
            0xCB00014B032A5FCC;
            0x00024B032A5FCC00;
            0x034B2AB0;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#18, 18) { // LineNumberTable at 0x056C
              [4] { // LineNumberTable
                0  5; //  at 0x0578
                4  6; //  at 0x057C
                11  7; //  at 0x0580
                18  8; //  at 0x0584
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
  } // methods

  [3] { // Attributes
    Attr(#34, 2) { // SourceFile at 0x0586
      #35;
    } // end SourceFile
    ;
    Attr(#58, 10) { // InnerClasses at 0x058E
      [1] { // InnerClasses
        #56 #60 #57 25; //  at 0x059E
      }
    } // end InnerClasses
    ;
    Attr(#44, 6) { // BootstrapMethods at 0x059E
      [1] { // bootstrap_methods
        {  //  bootstrap_method
          #45; // bootstrap_method_ref
          [0] { // bootstrap_arguments
          }  //  bootstrap_arguments
        }  //  bootstrap_method
      }
    } // end BootstrapMethods
  } // Attributes
} // end class NoNullVT
