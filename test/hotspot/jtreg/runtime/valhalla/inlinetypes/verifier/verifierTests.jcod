/*
 * Copyright (c) 2018, 2021, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 *
 */

// Many of the jcod classes in this file were derived from this Java inline type:
//
// final inline class Value {
//     static final Value VT = makeValue(0x01234567);
//     final int int_v;
//     Value() {
//         int_v = 1;
//     }
//     static Value makeValue(int x) {
//         Value v = Value.default;
//         v = __WithField(v.int_v, x);
//         return v;
//     }
// }
//
// The changes for each test were made to the bytecodes for method makeValue(int x).
// Its bytecodes are:
//
//  static Value makeValue(int); descriptor: (I)LValue; flags: (0x0008) ACC_STATIC
//    Code:
//      stack=2, locals=2, args_size=1
//         0: defaultvalue  #3                  // class Value
//         3: astore_1
//         4: aload_1
//         5: iload_0
//         6: withfield     #2                  // Field int_v:I
//         9: astore_1
//        10: aload_1
//        11: areturn


// The constant pool index of the defaultvalue opcode (0xCB) in the Code
// attribute was changed to 0x93.  Since this index is outside the range of
// the constant pool, a VerifyError exception should get thrown.
//
class defValBadCP {
  0xCAFEBABE;
  0; // minor version
  62; // version
  [27] { // Constant Pool
    ; // first element is empty
    Method #7 #21; // #1     at 0x0A
    Field #3 #22; // #2     at 0x0F
    class #23; // #3     at 0x14
    int 0x01234567; // #4     at 0x17
    Method #3 #24; // #5     at 0x1C
    Field #3 #25; // #6     at 0x21
    class #26; // #7     at 0x26
    Utf8 "VT"; // #8     at 0x29
    Utf8 "LdefValBadCP;"; // #9     at 0x2E
    Utf8 "int_v"; // #10     at 0x38
    Utf8 "I"; // #11     at 0x40
    Utf8 "<init>"; // #12     at 0x44
    Utf8 "()V"; // #13     at 0x4D
    Utf8 "Code"; // #14     at 0x53
    Utf8 "LineNumberTable"; // #15     at 0x5A
    Utf8 "makeValue"; // #16     at 0x6C
    Utf8 "(I)LdefValBadCP;"; // #17     at 0x78
    Utf8 "<clinit>"; // #18     at 0x85
    Utf8 "SourceFile"; // #19     at 0x90
    Utf8 "defValBadCP.java"; // #20     at 0x9D
    NameAndType #12 #13; // #21     at 0xAA
    NameAndType #10 #11; // #22     at 0xAF
    Utf8 "defValBadCP"; // #23     at 0xB4
    NameAndType #16 #17; // #24     at 0xBC
    NameAndType #8 #9; // #25     at 0xC1
    Utf8 "java/lang/Object"; // #26     at 0xC6
  } // Constant Pool

  0x0130; // access [ ACC_INLINE ACC_SUPER ACC_FINAL ]
  #3;// this_cpx
  #7;// super_cpx

  [0] { // Interfaces
  } // Interfaces

  [2] { // fields
    { // Member at 0xE3
      0x0018; // access
      #8; // name_cpx
      #9; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
    ;
    { // Member at 0xEB
      0x0010; // access
      #10; // name_cpx
      #11; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
  } // fields

  [1] { // methods
    { // Member at 0x012D
      0x0008; // access
      #16; // name_cpx
      #17; // sig_cpx
      [1] { // Attributes
        Attr(#14, 44) { // Code at 0x0135
          2; // max_stack
          2; // max_locals
          Bytes[12]{
            0xCB00934C2B1ACC00; // Changed CP index from 3 to 0x93 for opcode 0xCB (defaultvalue)
            0x024C2BB0;         // so that the index is outside of the range of the constant pool.
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#15, 14) { // LineNumberTable at 0x0153
              [3] { // LineNumberTable
                0  8; //  at 0x015F
                4  9; //  at 0x0163
                10  10; //  at 0x0167
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
  } // methods

  [1] { // Attributes
    Attr(#19, 2) { // SourceFile at 0x0198
      #20;
    } // end SourceFile
  } // Attributes
} // end class defValBadCP

///////////////////////////////////////////////////////////

// The class's major version was changed to 54.  Since this class has a
// defaultvalue opcode (0xCB), this should cause a ClassFormatError
// exception to get thrown.
//
class defValBadMajorVersion {
  0xCAFEBABE;
  0; // minor version
  54; // version
  [27] { // Constant Pool
    ; // first element is empty
    Method #7 #21; // #1     at 0x0A
    Field #3 #22; // #2     at 0x0F
    class #23; // #3     at 0x14
    int 0x01234567; // #4     at 0x17
    Method #3 #24; // #5     at 0x1C
    Field #3 #25; // #6     at 0x21
    class #26; // #7     at 0x26
    Utf8 "VT"; // #8     at 0x29
    Utf8 "LdefValBadMajorVersion;"; // #9     at 0x2E
    Utf8 "int_v"; // #10     at 0x38
    Utf8 "I"; // #11     at 0x40
    Utf8 "<init>"; // #12     at 0x44
    Utf8 "()V"; // #13     at 0x4D
    Utf8 "Code"; // #14     at 0x53
    Utf8 "LineNumberTable"; // #15     at 0x5A
    Utf8 "makeValue"; // #16     at 0x6C
    Utf8 "(I)LdefValBadMajorVersion;"; // #17     at 0x78
    Utf8 "<clinit>"; // #18     at 0x85
    Utf8 "SourceFile"; // #19     at 0x90
    Utf8 "defValBadMajorVersion.java"; // #20     at 0x9D
    NameAndType #12 #13; // #21     at 0xAA
    NameAndType #10 #11; // #22     at 0xAF
    Utf8 "defValBadMajorVersion"; // #23     at 0xB4
    NameAndType #16 #17; // #24     at 0xBC
    NameAndType #8 #9; // #25     at 0xC1
    Utf8 "java/lang/Object"; // #26     at 0xC6
  } // Constant Pool

  0x0130; // access [ ACC_INLINE ACC_SUPER ACC_FINAL ]
  #3;// this_cpx
  #7;// super_cpx

  [0] { // Interfaces
  } // Interfaces

  [2] { // fields
    { // Member at 0xE3
      0x0018; // access
      #8; // name_cpx
      #9; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
    ;
    { // Member at 0xEB
      0x0010; // access
      #10; // name_cpx
      #11; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
  } // fields

  [1] { // methods
    { // Member at 0x012D
      0x0008; // access
      #16; // name_cpx
      #17; // sig_cpx
      [1] { // Attributes
        Attr(#14, 44) { // Code at 0x0135
          2; // max_stack
          2; // max_locals
          Bytes[12]{
            0xCB00034C2B1ACC00;
            0x024C2BB0;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#15, 14) { // LineNumberTable at 0x0153
              [3] { // LineNumberTable
                0  8; //  at 0x015F
                4  9; //  at 0x0163
                10  10; //  at 0x0167
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
  } // methods

  [1] { // Attributes
    Attr(#19, 2) { // SourceFile at 0x0198
      #20;
    } // end SourceFile
  } // Attributes
} // end class defValBadMajorVersion

///////////////////////////////////////////////////////////

// The constant pool index of a defaultvalue opcode (0xCB) in the Code
// attribute was changed to 2.  Since this index now points to a Field
// entry instead of a Class entry, a VerifyError exception should get thrown.
//
class defValWrongCPType {
  0xCAFEBABE;
  0; // minor version
  62; // version
  [27] { // Constant Pool
    ; // first element is empty
    Method #7 #21; // #1     at 0x0A
    Field #3 #22; // #2     at 0x0F
    class #23; // #3     at 0x14
    int 0x01234567; // #4     at 0x17
    Method #3 #24; // #5     at 0x1C
    Field #3 #25; // #6     at 0x21
    class #26; // #7     at 0x26
    Utf8 "VT"; // #8     at 0x29
    Utf8 "LdefValWrongCPType;"; // #9     at 0x2E
    Utf8 "int_v"; // #10     at 0x38
    Utf8 "I"; // #11     at 0x40
    Utf8 "<init>"; // #12     at 0x44
    Utf8 "()V"; // #13     at 0x4D
    Utf8 "Code"; // #14     at 0x53
    Utf8 "LineNumberTable"; // #15     at 0x5A
    Utf8 "makeValue"; // #16     at 0x6C
    Utf8 "(I)LdefValWrongCPType;"; // #17     at 0x78
    Utf8 "<clinit>"; // #18     at 0x85
    Utf8 "SourceFile"; // #19     at 0x90
    Utf8 "defValWrongCPType.java"; // #20     at 0x9D
    NameAndType #12 #13; // #21     at 0xAA
    NameAndType #10 #11; // #22     at 0xAF
    Utf8 "defValWrongCPType"; // #23     at 0xB4
    NameAndType #16 #17; // #24     at 0xBC
    NameAndType #8 #9; // #25     at 0xC1
    Utf8 "java/lang/Object"; // #26     at 0xC6
  } // Constant Pool

  0x0130; // access [ ACC_INLINE ACC_SUPER ACC_FINAL ]
  #3;// this_cpx
  #7;// super_cpx

  [0] { // Interfaces
  } // Interfaces

  [2] { // fields
    { // Member at 0xE3
      0x0018; // access
      #8; // name_cpx
      #9; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
    ;
    { // Member at 0xEB
      0x0010; // access
      #10; // name_cpx
      #11; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
  } // fields

  [1] { // methods
    { // Member at 0x012D
      0x0008; // access
      #16; // name_cpx
      #17; // sig_cpx
      [1] { // Attributes
        Attr(#14, 44) { // Code at 0x0135
          2; // max_stack
          2; // max_locals
          Bytes[12]{
            0xCB00024C2B1ACC00; // Changed CP index from 3 to 2 for opcode 0xCB (defaultvalue)
            0x024C2BB0;         // so that the cp index no longer points to a cp Class entry.
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#15, 14) { // LineNumberTable at 0x0153
              [3] { // LineNumberTable
                0  8; //  at 0x015F
                4  9; //  at 0x0163
                10  10; //  at 0x0167
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
  } // methods

  [1] { // Attributes
    Attr(#19, 2) { // SourceFile at 0x0198
      #20;
    } // end SourceFile
  } // Attributes
} // end class defValWrongCPType

///////////////////////////////////////////////////////////

// The constant pool index of the withfield opcode (0xCC) in the Code
// attribute was changed to 0x82.  Since this index is outside the range of
// the constant pool, a VerifyError exception should get thrown.
//
class wthFldBadCP {
  0xCAFEBABE;
  0; // minor version
  62; // version
  [20] { // Constant Pool
    ; // first element is empty
    Method #4 #17; // #1     at 0x0A
    Field #3 #18; // #2     at 0x0F
    class #12; // #3     at 0x14
    class #19; // #4     at 0x17
    Utf8 "int_v"; // #5     at 0x1A
    Utf8 "I"; // #6     at 0x22
    Utf8 "<init>"; // #7     at 0x26
    Utf8 "()V"; // #8     at 0x2F
    Utf8 "Code"; // #9     at 0x35
    Utf8 "LineNumberTable"; // #10     at 0x3C
    Utf8 "makewthFldBadCP"; // #11     at 0x4E
    Utf8 "wthFldBadCP"; // #12     at 0x60
    Utf8 "ValueTypes"; // #13     at 0x6E
    Utf8 "(I)LwthFldBadCP;"; // #14     at 0x7B
    Utf8 "SourceFile"; // #15     at 0x8E
    Utf8 "wthFldBadCP.java"; // #16     at 0x9B
    NameAndType #7 #8; // #17     at 0xAE
    NameAndType #5 #6; // #18     at 0xB3
    Utf8 "java/lang/Object"; // #19     at 0xB8
  } // Constant Pool

  0x0130; // access [ ACC_SUPER ACC_FINAL ]
  #3;// this_cpx
  #4;// super_cpx

  [0] { // Interfaces
  } // Interfaces

  [1] { // fields
    { // Member at 0xD5
      0x0010; // access
      #5; // name_cpx
      #6; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
  } // fields

  [1] { // methods
    { // Member at 0x0117
      0x0008; // access
      #11; // name_cpx
      #14; // sig_cpx
      [1] { // Attributes
        Attr(#9, 44) { // Code at 0x011F
          2; // max_stack
          2; // max_locals
          Bytes[12]{
            0xCB00034C2B1ACC00; // Changed CP index from 2 to 0x82 for opcode 0xCC (withfield)
            0x824C2BB0;         // so that the index is outside of the range of the constant pool.
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#10, 14) { // LineNumberTable at 0x013D
              [3] { // LineNumberTable
                0  8; //  at 0x0149
                4  9; //  at 0x014D
                10  10; //  at 0x0151
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
  } // methods

  [2] { // Attributes
    Attr(#15, 2) { // SourceFile at 0x0153
      #16;
    } // end SourceFile
    ;
    Attr(#13, 4) { // ValueTypes at 0x015B
      0x00010003;
    } // end ValueTypes
  } // Attributes
} // end class wthFldBadCP

///////////////////////////////////////////////////////////

// The opcode at bytecode position 5 in the Code array was changed to aload_1
// (0x2B).  This should cause a VerifyError because now the first operand on the
// stack for the withfield opcode (0xCC at bytecode position 6) does not match
// the type (int) of the field being assigned to.
//
class wthFldBadFldVal {
  0xCAFEBABE;
  0; // minor version
  62; // version
  [20] { // Constant Pool
    ; // first element is empty
    Method #4 #17; // #1     at 0x0A
    Field #3 #18; // #2     at 0x0F
    class #12; // #3     at 0x14
    class #19; // #4     at 0x17
    Utf8 "int_v"; // #5     at 0x1A
    Utf8 "I"; // #6     at 0x22
    Utf8 "<init>"; // #7     at 0x26
    Utf8 "()V"; // #8     at 0x2F
    Utf8 "Code"; // #9     at 0x35
    Utf8 "LineNumberTable"; // #10     at 0x3C
    Utf8 "makewthFldBadFldVal"; // #11     at 0x4E
    Utf8 "wthFldBadFldVal"; // #12     at 0x60
    Utf8 "ValueTypes"; // #13     at 0x6E
    Utf8 "(I)LwthFldBadFldVal;"; // #14     at 0x7B
    Utf8 "SourceFile"; // #15     at 0x8E
    Utf8 "wthFldBadFldVal.java"; // #16     at 0x9B
    NameAndType #7 #8; // #17     at 0xAE
    NameAndType #5 #6; // #18     at 0xB3
    Utf8 "java/lang/Object"; // #19     at 0xB8
  } // Constant Pool

  0x0130; // access [ ACC_SUPER ACC_FINAL ]
  #3;// this_cpx
  #4;// super_cpx

  [0] { // Interfaces
  } // Interfaces

  [1] { // fields
    { // Member at 0xD5
      0x0010; // access
      #5; // name_cpx
      #6; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
  } // fields

  [1] { // methods
    { // Member at 0x0117
      0x0008; // access
      #11; // name_cpx
      #14; // sig_cpx
      [1] { // Attributes
        Attr(#9, 44) { // Code at 0x011F
          2; // max_stack
          2; // max_locals
          Bytes[12]{
            0xCB00034C2B2BCC00; // Changed opcode at bytecode 5 from iload_0 to aload_1
            0x024C2BB0;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#10, 14) { // LineNumberTable at 0x013D
              [3] { // LineNumberTable
                0  8; //  at 0x0149
                4  9; //  at 0x014D
                10  10; //  at 0x0151
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
  } // methods

  [2] { // Attributes
    Attr(#15, 2) { // SourceFile at 0x0153
      #16;
    } // end SourceFile
    ;
    Attr(#13, 4) { // ValueTypes at 0x015B
      0x00010003;
    } // end ValueTypes
  } // Attributes
} // end class wthFldBadFldVal

///////////////////////////////////////////////////////////

// The opcode at bytecode position 4 in the Code array was changed to iload_1
// (0x1A).  This should cause a VerifyError because the second operand on the stack
// for the withfield opcode (0xCC at bytecode position 6) must be a reference.
//
class wthFldBadFldRef {
  0xCAFEBABE;
  0; // minor version
  62; // version
  [20] { // Constant Pool
    ; // first element is empty
    Method #4 #17; // #1     at 0x0A
    Field #3 #18; // #2     at 0x0F
    class #12; // #3     at 0x14
    class #19; // #4     at 0x17
    Utf8 "int_v"; // #5     at 0x1A
    Utf8 "I"; // #6     at 0x22
    Utf8 "<init>"; // #7     at 0x26
    Utf8 "()V"; // #8     at 0x2F
    Utf8 "Code"; // #9     at 0x35
    Utf8 "LineNumberTable"; // #10     at 0x3C
    Utf8 "makewthFldBadFldRef"; // #11     at 0x4E
    Utf8 "wthFldBadFldRef"; // #12     at 0x60
    Utf8 "ValueTypes"; // #13     at 0x6E
    Utf8 "(I)LwthFldBadFldRef;"; // #14     at 0x7B
    Utf8 "SourceFile"; // #15     at 0x8E
    Utf8 "wthFldBadFldRef.java"; // #16     at 0x9B
    NameAndType #7 #8; // #17     at 0xAE
    NameAndType #5 #6; // #18     at 0xB3
    Utf8 "java/lang/Object"; // #19     at 0xB8
  } // Constant Pool

  0x0130; // access [ ACC_SUPER ACC_FINAL ]
  #3;// this_cpx
  #4;// super_cpx

  [0] { // Interfaces
  } // Interfaces

  [1] { // fields
    { // Member at 0xD5
      0x0010; // access
      #5; // name_cpx
      #6; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
  } // fields

  [1] { // methods
    { // Member at 0x0117
      0x0008; // access
      #11; // name_cpx
      #14; // sig_cpx
      [1] { // Attributes
        Attr(#9, 44) { // Code at 0x011F
          2; // max_stack
          2; // max_locals
          Bytes[12]{
            0xCB00034C1A1ACC00; // Changed opcode at bytecode 4 from aload_1 to iload_0
            0x024C2BB0;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#10, 14) { // LineNumberTable at 0x013D
              [3] { // LineNumberTable
                0  8; //  at 0x0149
                4  9; //  at 0x014D
                10  10; //  at 0x0151
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
  } // methods

  [2] { // Attributes
    Attr(#15, 2) { // SourceFile at 0x0153
      #16;
    } // end SourceFile
    ;
    Attr(#13, 4) { // ValueTypes at 0x015B
      0x00010003;
    } // end ValueTypes
  } // Attributes
} // end class wthFldBadFldRef

///////////////////////////////////////////////////////////

// The class's major version was changed to 54 and the first opcode in the Code
// attribute was changed to a withfield (0xCC)..  Since withfield opcodes are not
// allowed in classes with major version 54, this should cause a ClassFormatError
// exception to get thrown.
//
class wthFldBadMajorVersion {
  0xCAFEBABE;
  0; // minor version
  54; // version
  [27] { // Constant Pool
    ; // first element is empty
    Method #7 #21; // #1     at 0x0A
    Field #3 #22; // #2     at 0x0F
    class #23; // #3     at 0x14
    int 0x01234567; // #4     at 0x17
    Method #3 #24; // #5     at 0x1C
    Field #3 #25; // #6     at 0x21
    class #26; // #7     at 0x26
    Utf8 "VT"; // #8     at 0x29
    Utf8 "LwthFldBadMajorVersion;"; // #9     at 0x2E
    Utf8 "int_v"; // #10     at 0x38
    Utf8 "I"; // #11     at 0x40
    Utf8 "<init>"; // #12     at 0x44
    Utf8 "()V"; // #13     at 0x4D
    Utf8 "Code"; // #14     at 0x53
    Utf8 "LineNumberTable"; // #15     at 0x5A
    Utf8 "makeValue"; // #16     at 0x6C
    Utf8 "(I)LwthFldBadMajorVersion;"; // #17     at 0x78
    Utf8 "<clinit>"; // #18     at 0x85
    Utf8 "SourceFile"; // #19     at 0x90
    Utf8 "wthFldBadMajorVersion.java"; // #20     at 0x9D
    NameAndType #12 #13; // #21     at 0xAA
    NameAndType #10 #11; // #22     at 0xAF
    Utf8 "wthFldBadMajorVersion"; // #23     at 0xB4
    NameAndType #16 #17; // #24     at 0xBC
    NameAndType #8 #9; // #25     at 0xC1
    Utf8 "java/lang/Object"; // #26     at 0xC6
  } // Constant Pool

  0x0130; // access [ ACC_INLINE ACC_SUPER ACC_FINAL ]
  #3;// this_cpx
  #7;// super_cpx

  [0] { // Interfaces
  } // Interfaces

  [2] { // fields
    { // Member at 0xE3
      0x0018; // access
      #8; // name_cpx
      #9; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
    ;
    { // Member at 0xEB
      0x0010; // access
      #10; // name_cpx
      #11; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
  } // fields

  [1] { // methods
    { // Member at 0x012D
      0x0008; // access
      #16; // name_cpx
      #17; // sig_cpx
      [1] { // Attributes
        Attr(#14, 44) { // Code at 0x0135
          2; // max_stack
          2; // max_locals
          Bytes[12]{
            0xCC00034C2B1ACC00; // Changed the first opcode to 0xCC (withfield) in order to
            0x024C2BB0;         // test withfield opcode with an illegal major version.
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#15, 14) { // LineNumberTable at 0x0153
              [3] { // LineNumberTable
                0  8; //  at 0x015F
                4  9; //  at 0x0163
                10  10; //  at 0x0167
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
  } // methods

  [1] { // Attributes
    Attr(#19, 2) { // SourceFile at 0x0198
      #20;
    } // end SourceFile
  } // Attributes
} // end class wthFldBadMajorVersion

///////////////////////////////////////////////////////////

// The constant pool index of a withfield opcode (0xCC) in the Code
// attribute was changed to 1.  Since this index now points to a Method
// entry instead of a Field entry, a VerifyError exception should get thrown.
//
class wthFldWrongCPType {
  0xCAFEBABE;
  0; // minor version
  62; // version
  [20] { // Constant Pool
    ; // first element is empty
    Method #4 #17; // #1     at 0x0A
    Field #3 #18; // #2     at 0x0F
    class #12; // #3     at 0x14
    class #19; // #4     at 0x17
    Utf8 "int_v"; // #5     at 0x1A
    Utf8 "I"; // #6     at 0x22
    Utf8 "<init>"; // #7     at 0x26
    Utf8 "()V"; // #8     at 0x2F
    Utf8 "Code"; // #9     at 0x35
    Utf8 "LineNumberTable"; // #10     at 0x3C
    Utf8 "makewthFldWrongCPType"; // #11     at 0x4E
    Utf8 "wthFldWrongCPType"; // #12     at 0x60
    Utf8 "ValueTypes"; // #13     at 0x6E
    Utf8 "(I)LwthFldWrongCPType;"; // #14     at 0x7B
    Utf8 "SourceFile"; // #15     at 0x8E
    Utf8 "wthFldWrongCPType.java"; // #16     at 0x9B
    NameAndType #7 #8; // #17     at 0xAE
    NameAndType #5 #6; // #18     at 0xB3
    Utf8 "java/lang/Object"; // #19     at 0xB8
  } // Constant Pool

  0x0130; // access [ ACC_SUPER ACC_FINAL ]
  #3;// this_cpx
  #4;// super_cpx

  [0] { // Interfaces
  } // Interfaces

  [1] { // fields
    { // Member at 0xD5
      0x0010; // access
      #5; // name_cpx
      #6; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
  } // fields

  [1] { // methods
    { // Member at 0x0117
      0x0008; // access
      #11; // name_cpx
      #14; // sig_cpx
      [1] { // Attributes
        Attr(#9, 44) { // Code at 0x011F
          2; // max_stack
          2; // max_locals
          Bytes[12]{
            0xCB00034C2B1ACC00; // Changed CP index from 2 to 1 for opcode 0xCC (withfield)
            0x014C2BB0;         // so that the cp index no longer points to a cp Field entry.
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#10, 14) { // LineNumberTable at 0x013D
              [3] { // LineNumberTable
                0  8; //  at 0x0149
                4  9; //  at 0x014D
                10  10; //  at 0x0151
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
  } // methods

  [2] { // Attributes
    Attr(#15, 2) { // SourceFile at 0x0153
      #16;
    } // end SourceFile
    ;
    Attr(#13, 4) { // ValueTypes at 0x015B
      0x00010003;
    } // end ValueTypes
  } // Attributes
} // end class wthFldWrongCPType

///////////////////////////////////////////////////////////

// The cp entry for the defaultvalue opcode was changed to a reference that
// is not an inline type.
// This should cause a VerifyError because the cp entry for opcode defaultvalue
// must be an inline type.
//
class defValueObj {
  0xCAFEBABE;
  0; // minor version
  62; // version
  [46] { // Constant Pool
    ; // first element is empty
    class #23; // #1     at 0x0A
    Field #1 #24; // #2     at 0x0D
    InvokeDynamic 0s #27; // #3     at 0x12
    InvokeDynamic 0s #28; // #4     at 0x17
    InvokeDynamic 0s #29; // #5     at 0x1C
    class #30; // #6     at 0x21
    Utf8 "int_v"; // #7     at 0x24
    Utf8 "I"; // #8     at 0x2C
    Utf8 "makedefValueObj"; // #9     at 0x30
    Utf8 "(I)QdefValueObj;"; // #10     at 0x41
    Utf8 "Code"; // #11     at 0x53
    Utf8 "LineNumberTable"; // #12     at 0x5A
    Utf8 "hashCode"; // #13     at 0x6C
    Utf8 "()I"; // #14     at 0x77
    Utf8 "equals"; // #15     at 0x7D
    Utf8 "(Ljava/lang/Object;)Z"; // #16     at 0x86
    Utf8 "toString"; // #17     at 0x9E
    Utf8 "()Ljava/lang/String;"; // #18     at 0xA9
    Utf8 "<init>"; // #19     at 0xC0
    Utf8 "()QdefValueObj;"; // #20     at 0xC9
    Utf8 "SourceFile"; // #21     at 0xDA
    Utf8 "defValueObj.java"; // #22     at 0xE7
    Utf8 "defValueObj"; // #23     at 0xF9
    NameAndType #7 #8; // #24     at 0x0106
    Utf8 "BootstrapMethods"; // #25     at 0x010B
    MethodHandle 6b #31; // #26     at 0x011E
    NameAndType #13 #32; // #27     at 0x0122
    NameAndType #15 #33; // #28     at 0x0127
    NameAndType #17 #34; // #29     at 0x012C
    Utf8 "java/lang/Object"; // #30     at 0x0131
    Method #35 #36; // #31     at 0x0144
    Utf8 "(QdefValueObj;)I"; // #32     at 0x0149
    Utf8 "(QdefValueObj;Ljava/lang/Object;)Z"; // #33     at 0x015B
    Utf8 "(QdefValueObj;)Ljava/lang/String;"; // #34     at 0x017F
    class #37; // #35     at 0x01A2
    NameAndType #38 #42; // #36     at 0x01A5
    Utf8 "java/lang/invoke/ValueBootstrapMethods"; // #37     at 0x01AA
    Utf8 "makeBootstrapMethod"; // #38     at 0x01D3
    class #44; // #39     at 0x01E9
    Utf8 "Lookup"; // #40     at 0x01EC
    Utf8 "InnerClasses"; // #41     at 0x01F5
    Utf8 "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"; // #42     at 0x0204
    class #45; // #43     at 0x027A
    Utf8 "java/lang/invoke/MethodHandles$Lookup"; // #44     at 0x027D
    Utf8 "java/lang/invoke/MethodHandles"; // #45     at 0x02A5
  } // Constant Pool

  0x0130; // access [ ACC_SUPER ACC_FINAL ]
  #1;// this_cpx
  #6;// super_cpx

  [0] { // Interfaces
  } // Interfaces

  [1] { // fields
    { // Member at 0x02D0
      0x0010; // access
      #7; // name_cpx
      #8; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
  } // fields

  [5] { // methods
    { // Member at 0x02DA
      0x0008; // access
      #9; // name_cpx
      #10; // sig_cpx
      [1] { // Attributes
        Attr(#11, 45) { // Code at 0x02E2
          2; // max_stack
          2; // max_locals
          Bytes[13]{
            0xCB00044C1A2B5FCC; // Changed defaultvalue's cp index at byte 3 from 3 to 4.
            0x00024C2BB0;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#12, 14) { // LineNumberTable at 0x0301
              [3] { // LineNumberTable
                0  8; //  at 0x030D
                4  9; //  at 0x0311
                11  10; //  at 0x0315
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x0315
      0x0011; // access
      #13; // name_cpx
      #14; // sig_cpx
      [1] { // Attributes
        Attr(#11, 31) { // Code at 0x031D
          1; // max_stack
          1; // max_locals
          Bytes[7]{
            0x2ABA00030000AC;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#12, 6) { // LineNumberTable at 0x0336
              [1] { // LineNumberTable
                0  1; //  at 0x0342
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x0342
      0x0011; // access
      #15; // name_cpx
      #16; // sig_cpx
      [1] { // Attributes
        Attr(#11, 32) { // Code at 0x034A
          2; // max_stack
          2; // max_locals
          Bytes[8]{
            0x2A2BBA00040000AC;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#12, 6) { // LineNumberTable at 0x0364
              [1] { // LineNumberTable
                0  1; //  at 0x0370
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x0370
      0x0011; // access
      #17; // name_cpx
      #18; // sig_cpx
      [1] { // Attributes
        Attr(#11, 31) { // Code at 0x0378
          1; // max_stack
          1; // max_locals
          Bytes[7]{
            0x2ABA00050000B0;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#12, 6) { // LineNumberTable at 0x0391
              [1] { // LineNumberTable
                0  1; //  at 0x039D
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x039D
      0x0008; // access
      #19; // name_cpx
      #20; // sig_cpx
      [1] { // Attributes
        Attr(#11, 45) { // Code at 0x03A5
          2; // max_stack
          1; // max_locals
          Bytes[13]{
            0xCB00014B042A5FCC;
            0x00024B2AB0;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#12, 14) { // LineNumberTable at 0x03C4
              [3] { // LineNumberTable
                0  4; //  at 0x03D0
                4  5; //  at 0x03D4
                11  6; //  at 0x03D8
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
  } // methods

  [3] { // Attributes
    Attr(#21, 2) { // SourceFile at 0x03DA
      #22;
    } // end SourceFile
    ;
    Attr(#41, 10) { // InnerClasses at 0x03E2
      [1] { // InnerClasses
        #39 #43 #40 25; //  at 0x03F2
      }
    } // end InnerClasses
    ;
    Attr(#25, 6) { // BootstrapMethods at 0x03F2
      [1] { // bootstrap_methods
        {  //  bootstrap_method
          #26; // bootstrap_method_ref
          [0] { // bootstrap_arguments
          }  //  bootstrap_arguments
        }  //  bootstrap_method
      }
    } // end BootstrapMethods
  } // Attributes
} // end class defValueObj

///////////////////////////////////////////////////////////

// This class has a withfield opcode with a non-Q type operand.
class withfieldL {
  0xCAFEBABE;
  0; // minor version
  62; // version
  [28] { // Constant Pool
    ; // first element is empty
    class #2; // #1     at 0x0A
    Utf8 "withfieldL"; // #2     at 0x0D
    class #2; // #3     at 0x17
    Field #1 #5; // #4     at 0x1A
    NameAndType #6 #7; // #5     at 0x1F
    Utf8 "x"; // #6     at 0x24
    Utf8 "I"; // #7     at 0x28
    Field #1 #9; // #8     at 0x2C
    NameAndType #10 #7; // #9     at 0x31
    Utf8 "y"; // #10     at 0x36
    class #12; // #11     at 0x3A
    Utf8 "QwithfieldL;"; // #12     at 0x3D
    class #14; // #13     at 0x49
    Utf8 "java/lang/Object"; // #14     at 0x4C
    Utf8 "makePoint"; // #15     at 0x5F
    Utf8 "(II)QwithfieldL;"; // #16     at 0x6B
    Utf8 "Code"; // #17     at 0x7B
    Utf8 "LineNumberTable"; // #18     at 0x82
    Utf8 "<init>"; // #19     at 0x94
    Utf8 "()QwithfieldL;"; // #20     at 0x9D
    Utf8 "SourceFile"; // #21     at 0xAB
    Utf8 "X.java"; // #22     at 0xB8
    Utf8 "NestHost"; // #23     at 0xC1
    class #25; // #24     at 0xCC
    Utf8 "X"; // #25     at 0xCF
    Utf8 "InnerClasses"; // #26     at 0xD3
    Utf8 "Point"; // #27     at 0xE2
  } // Constant Pool

  0x0130; // access [ ACC_SUPER ACC_FINAL ]
  #1;// this_cpx
  #13;// super_cpx

  [0] { // Interfaces
  } // Interfaces

  [2] { // Fields
    {  // field at 0xF4
      0x0010; // access
      #6; // name_index       : x
      #7; // descriptor_index : I
      [0] { // Attributes
      } // Attributes
    }
    ;
    {  // field at 0xFC
      0x0010; // access
      #10; // name_index       : y
      #7; // descriptor_index : I
      [0] { // Attributes
      } // Attributes
    }
  } // Fields

  [2] { // Methods
    {  // method at 0x0106
      0x0008; // access
      #15; // name_index       : makePoint
      #16; // descriptor_index : (II)QwithfieldL;
      [1] { // Attributes
        Attr(#17, 62) { // Code at 0x010E
          2; // max_stack
          3; // max_locals
          Bytes[26]{
            0xCB0001C000034D1A;
            0x2C5FCC00044D1B2C;
            0x5FCC00084D2CC000;
            0x0BB0;
          }
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#18, 18) { // LineNumberTable at 0x013A
              [4] { // line_number_table
                0  4; //  at 0x0146
                7  5; //  at 0x014A
                14  6; //  at 0x014E
                21  7; //  at 0x0152
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    }
    ;
    {  // method at 0x0152
      0x000A; // access
      #19; // name_index       : <init>
      #20; // descriptor_index : ()QwithfieldL;
      [1] { // Attributes
        Attr(#17, 55) { // Code at 0x015A
          2; // max_stack
          1; // max_locals
          Bytes[23]{
            0xCB00014B032A5FCC;
            0x0008594BB400082A;
            0x5FCC00044B2AB0;
          }
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#18, 14) { // LineNumberTable at 0x0183
              [3] { // line_number_table
                0  9; //  at 0x018F
                4  10; //  at 0x0193
                21  11; //  at 0x0197
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    }
  } // Methods

  [3] { // Attributes
    Attr(#21, 2) { // SourceFile at 0x0199
      #22;
    } // end SourceFile
    ;
    Attr(#23, 2) { // NestHost at 0x01A1
      #24; // X at 0x01A9
    } // end NestHost
    ;
    Attr(#26, 10) { // InnerClasses at 0x01A9
      [1] { // classes
        #1 #24 #27 280; //  at 0x01B9
      }
    } // end InnerClasses
  } // Attributes
} // end class withfieldL

///////////////////////////////////////////////////////////

// Test that a VerifyError exception is thrown when trying to pass a null
// when the formal parameter is an inline type.
//
// // Java program emulating the jcod contents.
// public inline final class NoNullVT {
//     final int x;
//     final int y;
//
//     private NoNullVT() {
//         x = 0;
//         y = 0;
//     }
//
//     public int getX() { return x; }
//     public int getY() { return y; }
//
//     public boolean isSameNoNullVT(NoNullVT that) {
//         return this.getX() == that.getX() && this.getY() == that.getY();
//     }
//
//     public boolean equals(Object o) {
//         if(o instanceof NoNullVT) {
//             return ((NoNullVT)o).x == x &&  ((NoNullVT)o).y == y;
//         } else {
//             return false;
//         }
//     }
//
//     public static NoNullVT createNoNullVT(int x, int y) {
//         NoNullVT p = NoNullVT.default;
//         p = __WithField(p.x, x);
//         p = __WithField(p.y, y);
//         return p;
//     }
//
//     public static void main(String[] args) {
//         String str = null;
//         NoNullVT a = createNoNullVT(3, 4);
//         NoNullVT b = createNoNullVT(2, 4);
//         boolean res = a.isSameNoNullVT(null); // Should throw VerifyError
//     }
// }

class NoNullVT {
  0xCAFEBABE;
  0; // minor version
  62; // version
  [63] { // Constant Pool
    ; // first element is empty
    class #36; // #1     at 0x0A
    Field #1 #37; // #2     at 0x0D
    Field #1 #38; // #3     at 0x12
    Method #1 #39; // #4     at 0x17
    Method #1 #40; // #5     at 0x1C
    class #41; // #6     at 0x21
    Method #1 #42; // #7     at 0x24
    Method #1 #43; // #8     at 0x29
    InvokeDynamic 0s #46; // #9     at 0x2E
    InvokeDynamic 0s #47; // #10     at 0x33
    class #48; // #11     at 0x38
    Utf8 "x"; // #12     at 0x3B
    Utf8 "I"; // #13     at 0x3F
    Utf8 "y"; // #14     at 0x43
    Utf8 "getX"; // #15     at 0x47
    Utf8 "()I"; // #16     at 0x4E
    Utf8 "Code"; // #17     at 0x54
    Utf8 "LineNumberTable"; // #18     at 0x5B
    Utf8 "getY"; // #19     at 0x6D
    Utf8 "isSameNoNullVT"; // #20     at 0x74
    Utf8 "(QNoNullVT;)Z"; // #21     at 0x85
    Utf8 "StackMapTable"; // #22     at 0x95
    Utf8 "equals"; // #23     at 0xA5
    Utf8 "(Ljava/lang/Object;)Z"; // #24     at 0xAE
    Utf8 "createNoNullVT"; // #25     at 0xC6
    Utf8 "(II)QNoNullVT;"; // #26     at 0xD7
    Utf8 "main"; // #27     at 0xE8
    Utf8 "([Ljava/lang/String;)V"; // #28     at 0xEF
    Utf8 "hashCode"; // #29     at 0x0108
    Utf8 "toString"; // #30     at 0x0113
    Utf8 "()Ljava/lang/String;"; // #31     at 0x011E
    Utf8 "<init>"; // #32     at 0x0135
    Utf8 "()QNoNullVT;"; // #33     at 0x013E
    Utf8 "SourceFile"; // #34     at 0x014D
    Utf8 "NoNullVT.java"; // #35     at 0x015A
    Utf8 "NoNullVT"; // #36     at 0x016A
    NameAndType #12 #13; // #37     at 0x0175
    NameAndType #14 #13; // #38     at 0x017A
    NameAndType #15 #16; // #39     at 0x017F
    NameAndType #19 #16; // #40     at 0x0184
    Utf8 "QNoNullVT;"; // #41     at 0x0189
    NameAndType #25 #26; // #42     at 0x0196
    NameAndType #20 #21; // #43     at 0x019B
    Utf8 "BootstrapMethods"; // #44     at 0x01A0
    MethodHandle 6b #49; // #45     at 0x01B3
    NameAndType #29 #50; // #46     at 0x01B7
    NameAndType #30 #51; // #47     at 0x01BC
    Utf8 "java/lang/Object"; // #48     at 0x01C1
    Method #52 #53; // #49     at 0x01D4
    Utf8 "(QNoNullVT;)I"; // #50     at 0x01D9
    Utf8 "(QNoNullVT;)Ljava/lang/String;"; // #51     at 0x01E9
    class #54; // #52     at 0x020A
    NameAndType #55 #59; // #53     at 0x020D
    Utf8 "java/lang/invoke/ValueBootstrapMethods"; // #54     at 0x0212
    Utf8 "makeBootstrapMethod"; // #55     at 0x023B
    class #61; // #56     at 0x0251
    Utf8 "Lookup"; // #57     at 0x0254
    Utf8 "InnerClasses"; // #58     at 0x025D
    Utf8 "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"; // #59     at 0x026C
    class #62; // #60     at 0x02E2
    Utf8 "java/lang/invoke/MethodHandles$Lookup"; // #61     at 0x02E5
    Utf8 "java/lang/invoke/MethodHandles"; // #62     at 0x030D
  } // Constant Pool

  0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
  #1;// this_cpx
  #11;// super_cpx

  [0] { // Interfaces
  } // Interfaces

  [2] { // fields
    { // Member at 0x0338
      0x0010; // access
      #12; // name_cpx
      #13; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
    ;
    { // Member at 0x0340
      0x0010; // access
      #14; // name_cpx
      #13; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
  } // fields

  [9] { // methods
    { // Member at 0x034A
      0x0001; // access
      #15; // name_cpx
      #16; // sig_cpx
      [1] { // Attributes
        Attr(#17, 29) { // Code at 0x0352
          1; // max_stack
          1; // max_locals
          Bytes[5]{
            0x2AB40002AC;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#18, 6) { // LineNumberTable at 0x0369
              [1] { // LineNumberTable
                0  10; //  at 0x0375
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x0375
      0x0001; // access
      #19; // name_cpx
      #16; // sig_cpx
      [1] { // Attributes
        Attr(#17, 29) { // Code at 0x037D
          1; // max_stack
          1; // max_locals
          Bytes[5]{
            0x2AB40003AC;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#18, 6) { // LineNumberTable at 0x0394
              [1] { // LineNumberTable
                0  11; //  at 0x03A0
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x03A0
      0x0001; // access
      #20; // name_cpx
      #21; // sig_cpx
      [1] { // Attributes
        Attr(#17, 63) { // Code at 0x03A8
          2; // max_stack
          2; // max_locals
          Bytes[28]{
            0x2AB600042BB60004;
            0xA000122AB600052B;
            0xB60005A0000704A7;
            0x000403AC;
          };
          [0] { // Traps
          } // end Traps
          [2] { // Attributes
            Attr(#18, 6) { // LineNumberTable at 0x03D6
              [1] { // LineNumberTable
                0  14; //  at 0x03E2
              }
            } // end LineNumberTable
            ;
            Attr(#22, 5) { // StackMapTable at 0x03E2
              [2] { // 
                26b; // same_frame
                64b, [1]z{1b}; // same_locals_1_stack_item_frame
              }
            } // end StackMapTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x03ED
      0x0001; // access
      #23; // name_cpx
      #24; // sig_cpx
      [1] { // Attributes
        Attr(#17, 87) { // Code at 0x03F5
          2; // max_stack
          2; // max_locals
          Bytes[43]{
            0x2BC100019900252B;
            0xC00006B400022AB4;
            0x0002A000152BC000;
            0x06B400032AB40003;
            0xA0000704A7000403;
            0xAC03AC;
          };
          [0] { // Traps
          } // end Traps
          [2] { // Attributes
            Attr(#18, 14) { // LineNumberTable at 0x0432
              [3] { // LineNumberTable
                0  18; //  at 0x043E
                7  19; //  at 0x0442
                41  21; //  at 0x0446
              }
            } // end LineNumberTable
            ;
            Attr(#22, 6) { // StackMapTable at 0x0446
              [3] { // 
                39b; // same_frame
                64b, [1]z{1b}; // same_locals_1_stack_item_frame
                0b; // same_frame
              }
            } // end StackMapTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x0452
      0x0009; // access
      #25; // name_cpx
      #26; // sig_cpx
      [1] { // Attributes
        Attr(#17, 56) { // Code at 0x045A
          2; // max_stack
          3; // max_locals
          Bytes[20]{
            0xCB00014D1A2C5FCC;
            0x00024D1B2C5FCC00;
            0x034D2CB0;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#18, 18) { // LineNumberTable at 0x0480
              [4] { // LineNumberTable
                0  26; //  at 0x048C
                4  27; //  at 0x0490
                11  28; //  at 0x0494
                18  29; //  at 0x0498
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x0498
      0x0009; // access
      #27; // name_cpx
      #28; // sig_cpx
      [1] { // Attributes
        Attr(#17, 62) { // Code at 0x04A0
          2; // max_stack
          5; // max_locals
          Bytes[22]{
            0x014C0607B800074D;
            0x0507B800074E2C2B; // Change last nibble from C to B to load null
            0xB600083604B1;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#18, 22) { // LineNumberTable at 0x04C8
              [5] { // LineNumberTable
                0  33; //  at 0x04D4
                2  34; //  at 0x04D8
                8  35; //  at 0x04DC
                14  36; //  at 0x04E0
                21  37; //  at 0x04E4
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x04E4
      0x0011; // access
      #29; // name_cpx
      #16; // sig_cpx
      [1] { // Attributes
        Attr(#17, 31) { // Code at 0x04EC
          1; // max_stack
          1; // max_locals
          Bytes[7]{
            0x2ABA00090000AC;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#18, 6) { // LineNumberTable at 0x0505
              [1] { // LineNumberTable
                0  1; //  at 0x0511
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x0511
      0x0011; // access
      #30; // name_cpx
      #31; // sig_cpx
      [1] { // Attributes
        Attr(#17, 31) { // Code at 0x0519
          1; // max_stack
          1; // max_locals
          Bytes[7]{
            0x2ABA000A0000B0;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#18, 6) { // LineNumberTable at 0x0532
              [1] { // LineNumberTable
                0  1; //  at 0x053E
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x053E
      0x000A; // access
      #32; // name_cpx
      #33; // sig_cpx
      [1] { // Attributes
        Attr(#17, 56) { // Code at 0x0546
          2; // max_stack
          1; // max_locals
          Bytes[20]{
            0xCB00014B032A5FCC;
            0x00024B032A5FCC00;
            0x034B2AB0;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#18, 18) { // LineNumberTable at 0x056C
              [4] { // LineNumberTable
                0  5; //  at 0x0578
                4  6; //  at 0x057C
                11  7; //  at 0x0580
                18  8; //  at 0x0584
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
  } // methods

  [3] { // Attributes
    Attr(#34, 2) { // SourceFile at 0x0586
      #35;
    } // end SourceFile
    ;
    Attr(#58, 10) { // InnerClasses at 0x058E
      [1] { // InnerClasses
        #56 #60 #57 25; //  at 0x059E
      }
    } // end InnerClasses
    ;
    Attr(#44, 6) { // BootstrapMethods at 0x059E
      [1] { // bootstrap_methods
        {  //  bootstrap_method
          #45; // bootstrap_method_ref
          [0] { // bootstrap_arguments
          }  //  bootstrap_arguments
        }  //  bootstrap_method
      }
    } // end BootstrapMethods
  } // Attributes
} // end class NoNullVT
