/*
 * Copyright (c) 2025, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

identity class TryCatchChildBad extends Parent version 69:65535
{
  @-jdk/internal/vm/annotation/Strict { }
  strict Field x:I;
  @-jdk/internal/vm/annotation/Strict { }
  strict Field y:I;

  Method       "<init>":"()V"
    stack 4  locals 2
  {
         try               T0;
         iconst_1;
         newarray          int;
         astore_1;
         getstatic         Field java/lang/System.out:"Ljava/io/PrintStream;";
         aload_1;
         iconst_2;
         iaload;
         invokevirtual     Method java/io/PrintStream.println:"(I)V";
         endtry            T0;
         goto              L27;
         catch             T0 java/lang/ArrayIndexOutOfBoundsException;
         stack_frame_type  stack1;
           stack_map       class java/lang/ArrayIndexOutOfBoundsException;
         astore_1;
  L27:   stack_frame_type  early_larval;
           unset_fields;
           frame_type      same;
         aload_0;
         invokespecial     Method Parent."<init>":"()V";
         return;
  }

  Method       get_x:"()I"
    stack 1  locals 1
  {
         aload_0;
         getfield          Field x:"I";
         ireturn;
  }

  Method       get_y:"()I"
    stack 1  locals 1
  {
         aload_0;
         getfield          Field y:"I";
         ireturn;
  }

  public Method toString:"()Ljava/lang/String;"
    stack 3  locals 1
  {
         aload_0;
         invokevirtual     Method get_x:"()I";
         aload_0;
         invokevirtual     Method get_y:"()I";
         aload_0;
         invokespecial     Method Parent.toString:"()Ljava/lang/String;";
         invokedynamic     InvokeDynamic REF_invokeStatic:Method java/lang/invoke/StringConcatFactory.makeConcatWithConstants:
                           "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;":
                           makeConcatWithConstants:"(IILjava/lang/String;)Ljava/lang/String;" {
                             String "x: \u0001\ny: \u0001\n\u0001"
                           };
         areturn;
  }

  SourceFile               "TryCatchChild.java";

  InnerClass               public static final identity Lookup = class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles;

  BootstrapMethod          REF_invokeStatic:java/lang/invoke/StringConcatFactory.makeConcatWithConstants:
                           "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;";
                           {
                             String "x: \u0001\ny: \u0001\n\u0001"
                           }
} // end Class TryCatchChild compiled from "TryCatchChild.java"
