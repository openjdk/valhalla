/*
 * Copyright (c) 2024, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

// Defines the classes used by StrictFields.java to check verification
// of strict fields.

// StrictIgnore is an earlier classfile version for which strict must be ignored
// so we can write to it multiple times in the constructor.
public class StrictIgnore version 66:0 {
  final strict Field x:I;

  public Method "<init>":"()V" stack 2 {
      aload_0;
      iconst_1;
      putfield x:I;
      aload_0;
      invokespecial Method java/lang/Object."<init>":"()V";
      aload_0;
      iconst_1;
      putfield x:I;
      return;
   }
}

// StrictBase is a well formed value class with a strict field, that can
// be used for subclassing.
public abstract class StrictBase version 67:65535 {
  protected final strict Field x:I;

  public Method "<init>":"()V" stack 2 {
      aload_0;
      iconst_1;
      putfield x:I;
      aload_0;
      invokespecial Method java/lang/Object."<init>":"()V";
      return;
   }
}

// PostInitStrict is a bad value class that writes to a strict field after the
// super constructor call.
public final class PostInitStrict version 67:65535 {
  final strict Field y:I;

  public Method "<init>":"()V" stack 2 {
      aload_0;
      invokespecial Method java/lang/Object."<init>":"()V";
      aload_0;
      iconst_1;
      putfield y:I;
      return;
   }
}

// BadStrictSubPreInit is a bad value class that tries to write to an inherited
// strict field while acting on UninitializedThis.
public final class BadStrictSubPreInit extends StrictBase version 67:65535 {

  public Method "<init>":"()V" stack 2 {
      aload_0;
      iconst_1;
      putfield x:I;
      aload_0;
      invokespecial Method StrictBase."<init>":"()V";
      return;
   }
}

// BadStrictSubPostInit is a bad value class that tries to write to an inherited
// strict field in "regular" code.
public final class BadStrictSubPostInit extends StrictBase version 67:65535 {

  public Method "<init>":"()V" stack 2 {
      aload_0;
      invokespecial Method StrictBase."<init>":"()V";
      aload_0;
      iconst_1;
      putfield x:I;
      return;
   }
}
