/*
 * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 *
 */

/*
 * @test
 * @bug 8210351
 * @summary Check that IllegalAccessError exceptions get thrown if a class that
 *          is not a nestmate of an inline type tries to write to the inline type's
 *          final fields.
 * @compile -XDemitQtypes WithFieldNoAccessTest.jcod
 * @run main/othervm WithFieldNoAccessTest
 */

// This test is based on the below Java program.  The only difference is that
// the nestmate attributes have been removed.  So, inline type WithFieldNoAccessTest
// and WithFieldNoAccessTest$V are no longer nestmates.  This should cause
// IllegalAccessError exceptions when WithFieldNoAccessTest tries to write, using
// withfield, to inline type WithFieldNoAccessTest$V's final fields.
//
// public class WithFieldNoAccessTest {
//
//  public static final inline class V {
//      public final char c;
//      protected final long l;
//      private final int i;
//      V() {
//          this.c = '0';
//          this.l = 0;
//          this.i = 0;
//      }
//
//      public static V make(char c, long l, int i) {
//          V v = V.default;
//          v = __WithField(v.c, c);
//          v = __WithField(v.l, l);
//          v = __WithField(v.i, i);
//          return v;
//      }
//  }
//
//  public static void main(String... args) throws Throwable {
//      try {
//          V v = __WithField(V.make('a', 5, 10).c, 'b');
//          throw new RuntimeException("Failed to throw IllegalAccessError exception for final public field");
//      } catch (java.lang.IllegalAccessError e) {
//          if (!e.toString().contains("Update to non-static final field WithFieldNoAccessTest$V.c attempted")) {
//              throw new RuntimeException("Unexpected IllegalAccessError: " + e.toString());
//          }
//      }
//
//      try {
//          V v = __WithField(V.make('a', 5, 10).l, 25);
//          throw new RuntimeException("Failed to throw IllegalAccessError exception for final protected field");
//      } catch (java.lang.IllegalAccessError e) {
//          if (!e.toString().contains("Update to non-static final field WithFieldNoAccessTest$V.l attempted")) {
//              throw new RuntimeException("Unexpected IllegalAccessError: " +  e.toString());
//          }
//      }
//
//      try {
//          V v = __WithField(V.make('a', 5, 10).i, 20);
//          throw new RuntimeException("Failed to throw IllegalAccessError exception for final private field");
//      } catch (java.lang.IllegalAccessError e) {
//          if (!e.toString().contains("WithFieldNoAccessTest tried to access private field WithFieldNoAccessTest$V.i")) {
//              throw new RuntimeException("Unexpected IllegalAccessError: " + e.toString());
//          }
//      }
//  }
// }
//

class WithFieldNoAccessTest$V {
  0xCAFEBABE;
  0; // minor version
  60; // version
  [58] { // Constant Pool
    ; // first element is empty
    class #33; // #1     at 0x0A
    Field #1 #34; // #2     at 0x0D
    Field #1 #35; // #3     at 0x12
    Field #1 #36; // #4     at 0x17
    InvokeDynamic 0s #39; // #5     at 0x1C
    InvokeDynamic 0s #40; // #6     at 0x21
    InvokeDynamic 0s #41; // #7     at 0x26
    class #42; // #8     at 0x2B
    Utf8 "c"; // #9     at 0x2E
    Utf8 "C"; // #10     at 0x32
    Utf8 "l"; // #11     at 0x36
    Utf8 "J"; // #12     at 0x3A
    Utf8 "i"; // #13     at 0x3E
    Utf8 "I"; // #14     at 0x42
    Utf8 "make"; // #15     at 0x46
    Utf8 "V"; // #16     at 0x4D
    Utf8 "InnerClasses"; // #17     at 0x51
    Utf8 "(CJI)QWithFieldNoAccessTest$V;"; // #18     at 0x60
    Utf8 "Code"; // #19     at 0x81
    Utf8 "LineNumberTable"; // #20     at 0x88
    Utf8 "hashCode"; // #21     at 0x9A
    Utf8 "()I"; // #22     at 0xA5
    Utf8 "equals"; // #23     at 0xAB
    Utf8 "(Ljava/lang/Object;)Z"; // #24     at 0xB4
    Utf8 "toString"; // #25     at 0xCC
    Utf8 "()Ljava/lang/String;"; // #26     at 0xD7
    Utf8 "<init>"; // #27     at 0xEE
    Utf8 "()QWithFieldNoAccessTest$V;"; // #28     at 0xF7
    Utf8 "SourceFile"; // #29     at 0x0115
    Utf8 "WithFieldNoAccessTest.java"; // #30     at 0x0122
    Utf8 "NestHost"; // #31     at 0x013F
    class #43; // #32     at 0x014A
    Utf8 "WithFieldNoAccessTest$V"; // #33     at 0x014D
    NameAndType #9 #10; // #34     at 0x0167
    NameAndType #11 #12; // #35     at 0x016C
    NameAndType #13 #14; // #36     at 0x0171
    Utf8 "BootstrapMethods"; // #37     at 0x0176
    MethodHandle 6b #44; // #38     at 0x0189
    NameAndType #21 #45; // #39     at 0x018D
    NameAndType #23 #46; // #40     at 0x0192
    NameAndType #25 #47; // #41     at 0x0197
    Utf8 "java/lang/Object"; // #42     at 0x019C
    Utf8 "WithFieldNoAccessTest"; // #43     at 0x01AF
    Method #48 #49; // #44     at 0x01C7
    Utf8 "(QWithFieldNoAccessTest$V;)I"; // #45     at 0x01CC
    Utf8 "(QWithFieldNoAccessTest$V;Ljava/lang/Object;)Z"; // #46     at 0x01EB
    Utf8 "(QWithFieldNoAccessTest$V;)Ljava/lang/String;"; // #47     at 0x021C
    class #50; // #48     at 0x024C
    NameAndType #51 #54; // #49     at 0x024F
    Utf8 "java/lang/invoke/ValueBootstrapMethods"; // #50     at 0x0254
    Utf8 "makeBootstrapMethod"; // #51     at 0x027D
    class #56; // #52     at 0x0293
    Utf8 "Lookup"; // #53     at 0x0296
    Utf8 "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"; // #54     at 0x029F
    class #57; // #55     at 0x0315
    Utf8 "java/lang/invoke/MethodHandles$Lookup"; // #56     at 0x0318
    Utf8 "java/lang/invoke/MethodHandles"; // #57     at 0x0340
  } // Constant Pool

  0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
  #1;// this_cpx
  #8;// super_cpx

  [0] { // Interfaces
  } // Interfaces

  [3] { // fields
    { // Member at 0x036B
      0x0011; // access
      #9; // name_cpx
      #10; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
    ;
    { // Member at 0x0373
      0x0014; // access
      #11; // name_cpx
      #12; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
    ;
    { // Member at 0x037B
      0x0012; // access
      #13; // name_cpx
      #14; // sig_cpx
      [0] { // Attributes
      } // Attributes
    } // Member
  } // fields

  [5] { // methods
    { // Member at 0x0385
      0x0009; // access
      #15; // name_cpx
      #18; // sig_cpx
      [1] { // Attributes
        Attr(#19, 76) { // Code at 0x038D
          4; // max_stack
          5; // max_locals
          Bytes[36]{
            0xCB00013A041A1904;
            0x5FCC00023A041F19;
            0x045B57CC00033A04;
            0x1D19045FCC00043A;
            0x041904B0;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#20, 22) { // LineNumberTable at 0x03C3
              [5] { // LineNumberTable
                0  14; //  at 0x03CF
                5  15; //  at 0x03D3
                14  16; //  at 0x03D7
                24  17; //  at 0x03DB
                33  18; //  at 0x03DF
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x03DF
      0x0011; // access
      #21; // name_cpx
      #22; // sig_cpx
      [1] { // Attributes
        Attr(#19, 31) { // Code at 0x03E7
          1; // max_stack
          1; // max_locals
          Bytes[7]{
            0x2ABA00050000AC;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#20, 6) { // LineNumberTable at 0x0400
              [1] { // LineNumberTable
                0  3; //  at 0x040C
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x040C
      0x0011; // access
      #23; // name_cpx
      #24; // sig_cpx
      [1] { // Attributes
        Attr(#19, 32) { // Code at 0x0414
          2; // max_stack
          2; // max_locals
          Bytes[8]{
            0x2A2BBA00060000AC;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#20, 6) { // LineNumberTable at 0x042E
              [1] { // LineNumberTable
                0  3; //  at 0x043A
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x043A
      0x0011; // access
      #25; // name_cpx
      #26; // sig_cpx
      [1] { // Attributes
        Attr(#19, 31) { // Code at 0x0442
          1; // max_stack
          1; // max_locals
          Bytes[7]{
            0x2ABA00070000B0;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#20, 6) { // LineNumberTable at 0x045B
              [1] { // LineNumberTable
                0  3; //  at 0x0467
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x0467
      0x0008; // access
      #27; // name_cpx
      #28; // sig_cpx
      [1] { // Attributes
        Attr(#19, 69) { // Code at 0x046F
          4; // max_stack
          1; // max_locals
          Bytes[29]{
            0xCB00014B10302A5F;
            0xCC00024B092A5B57;
            0xCC00034B032A5FCC;
            0x00044B2AB0;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#20, 22) { // LineNumberTable at 0x049E
              [5] { // LineNumberTable
                0  7; //  at 0x04AA
                4  8; //  at 0x04AE
                12  9; //  at 0x04B2
                20  10; //  at 0x04B6
                27  11; //  at 0x04BA
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
  } // methods

  [3] { // Attributes
    Attr(#29, 2) { // SourceFile at 0x04BC
      #30;
    } // end SourceFile
    ;
    Attr(#17, 18) { // InnerClasses at 0x04CC
      [2] { // InnerClasses
        #1 #32 #16 281; //  at 0x04DC
        #52 #55 #53 25; //  at 0x04E4
      }
    } // end InnerClasses
    ;
    Attr(#37, 6) { // BootstrapMethods at 0x04E4
      [1] { // bootstrap_methods
        {  //  bootstrap_method
          #38; // bootstrap_method_ref
          [0] { // bootstrap_arguments
          }  //  bootstrap_arguments
        }  //  bootstrap_method
      }
    } // end BootstrapMethods
  } // Attributes
} // end class WithFieldNoAccessTest$V


class WithFieldNoAccessTest {
  0xCAFEBABE;
  0; // minor version
  60; // version
  [91] { // Constant Pool
    ; // first element is empty
    Method #23 #39; // #1     at 0x0A
    long 0x0000000000000005;; // #2     at 0x0F
    Method #24 #40; // #4     at 0x18
    Field #24 #41; // #5     at 0x1D
    class #42; // #6     at 0x22
    String #43; // #7     at 0x25
    Method #6 #44; // #8     at 0x28
    class #45; // #9     at 0x2D
    Method #9 #46; // #10     at 0x30
    String #47; // #11     at 0x35
    Method #48 #49; // #12     at 0x38
    InvokeDynamic 0s #53; // #13     at 0x3D
    long 0x0000000000000019;; // #14     at 0x42
    Field #24 #54; // #16     at 0x4B
    String #55; // #17     at 0x50
    String #56; // #18     at 0x53
    Field #24 #57; // #19     at 0x56
    String #58; // #20     at 0x5B
    String #59; // #21     at 0x5E
    class #60; // #22     at 0x61
    class #61; // #23     at 0x64
    class #62; // #24     at 0x67
    Utf8 "V"; // #25     at 0x6A
    Utf8 "InnerClasses"; // #26     at 0x6E
    Utf8 "<init>"; // #27     at 0x7D
    Utf8 "()V"; // #28     at 0x86
    Utf8 "Code"; // #29     at 0x8C
    Utf8 "LineNumberTable"; // #30     at 0x93
    Utf8 "main"; // #31     at 0xA5
    Utf8 "([Ljava/lang/String;)V"; // #32     at 0xAC
    Utf8 "StackMapTable"; // #33     at 0xC5
    Utf8 "Exceptions"; // #34     at 0xD5
    class #63; // #35     at 0xE2
    Utf8 "SourceFile"; // #36     at 0xE5
    Utf8 "WithFieldNoAccessTest.java"; // #37     at 0xF2
    Utf8 "NestMembers"; // #38     at 0x010F
    NameAndType #27 #28; // #39     at 0x011D
    NameAndType #64 #65; // #40     at 0x0122
    NameAndType #66 #67; // #41     at 0x0127
    Utf8 "java/lang/RuntimeException"; // #42     at 0x012C
    Utf8 "Failed to throw IllegalAccessError exception for final public field"; // #43     at 0x0149
    NameAndType #27 #68; // #44     at 0x018F
    Utf8 "java/lang/IllegalAccessError"; // #45     at 0x0194
    NameAndType #69 #70; // #46     at 0x01B3
    Utf8 "Update to non-static final field WithFieldNoAccessTest$V.c attempted"; // #47     at 0x01B8
    class #71; // #48     at 0x01FF
    NameAndType #72 #73; // #49     at 0x0202
    Utf8 "BootstrapMethods"; // #50     at 0x0207
    MethodHandle 6b #74; // #51     at 0x021A
    String #75; // #52     at 0x021E
    NameAndType #76 #77; // #53     at 0x0221
    NameAndType #78 #79; // #54     at 0x0226
    Utf8 "Failed to throw IllegalAccessError exception for final protected field"; // #55     at 0x022B
    Utf8 "Update to non-static final field WithFieldNoAccessTest$V.l attempted"; // #56     at 0x0274
    NameAndType #80 #81; // #57     at 0x02BB
    Utf8 "Failed to throw IllegalAccessError exception for final private field"; // #58     at 0x02C0
    Utf8 "WithFieldNoAccessTest tried to access private field WithFieldNoAccessTest$V.i"; // #59     at 0x0307
    Utf8 "WithFieldNoAccessTest"; // #60     at 0x0357
    Utf8 "java/lang/Object"; // #61     at 0x036F
    Utf8 "WithFieldNoAccessTest$V"; // #62     at 0x0382
    Utf8 "java/lang/Throwable"; // #63     at 0x039C
    Utf8 "make"; // #64     at 0x03B2
    Utf8 "(CJI)QWithFieldNoAccessTest$V;"; // #65     at 0x03B9
    Utf8 "c"; // #66     at 0x03DA
    Utf8 "C"; // #67     at 0x03DE
    Utf8 "(Ljava/lang/String;)V"; // #68     at 0x03E2
    Utf8 "toString"; // #69     at 0x03FA
    Utf8 "()Ljava/lang/String;"; // #70     at 0x0405
    Utf8 "java/lang/String"; // #71     at 0x041C
    Utf8 "contains"; // #72     at 0x042F
    Utf8 "(Ljava/lang/CharSequence;)Z"; // #73     at 0x043A
    Method #82 #83; // #74     at 0x0458
    Utf8 "Unexpected IllegalAccessError: "; // #75     at 0x045D
    Utf8 "makeConcatWithConstants"; // #76     at 0x0480
    Utf8 "(Ljava/lang/String;)Ljava/lang/String;"; // #77     at 0x049A
    Utf8 "l"; // #78     at 0x04C3
    Utf8 "J"; // #79     at 0x04C7
    Utf8 "i"; // #80     at 0x04CB
    Utf8 "I"; // #81     at 0x04CF
    class #84; // #82     at 0x04D3
    NameAndType #76 #87; // #83     at 0x04D6
    Utf8 "java/lang/invoke/StringConcatFactory"; // #84     at 0x04DB
    class #89; // #85     at 0x0502
    Utf8 "Lookup"; // #86     at 0x0505
    Utf8 "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;"; // #87     at 0x050E
    class #90; // #88     at 0x05A9
    Utf8 "java/lang/invoke/MethodHandles$Lookup"; // #89     at 0x05AC
    Utf8 "java/lang/invoke/MethodHandles"; // #90     at 0x05D4
  } // Constant Pool

  0x0021; // access [ ACC_PUBLIC ACC_SUPER ]
  #22;// this_cpx
  #23;// super_cpx

  [0] { // Interfaces
  } // Interfaces

  [0] { // fields
  } // fields

  [2] { // methods
    { // Member at 0x0601
      0x0001; // access
      #27; // name_cpx
      #28; // sig_cpx
      [1] { // Attributes
        Attr(#29, 29) { // Code at 0x0609
          1; // max_stack
          1; // max_locals
          Bytes[5]{
            0x2AB70001B1;
          };
          [0] { // Traps
          } // end Traps
          [1] { // Attributes
            Attr(#30, 6) { // LineNumberTable at 0x0620
              [1] { // LineNumberTable
                0  1; //  at 0x062C
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member at 0x062C
      0x0089; // access
      #31; // name_cpx
      #32; // sig_cpx
      [2] { // Attributes
        Attr(#29, 305) { // Code at 0x0634
          6; // max_stack
          2; // max_locals
          Bytes[174]{
            0x1062106114000210;
            0x0AB800045FCC0005;
            0x4CBB0006591207B7;
            0x0008BF4C2BB6000A;
            0x120BB6000C9A0014;
            0xBB0006592BB6000A;
            0xBA000D0000B70008;
            0xBF14000E10611400;
            0x02100AB800045B57;
            0xCC00104CBB000659;
            0x1211B70008BF4C2B;
            0xB6000A1212B6000C;
            0x9A0014BB0006592B;
            0xB6000ABA000D0000;
            0xB70008BF10141061;
            0x140002100AB80004;
            0x5FCC00134CBB0006;
            0x591214B70008BF4C;
            0x2BB6000A1215B600;
            0x0C9A0014BB000659;
            0x2BB6000ABA000D00;
            0x00B70008BFB1;
          };
          [3] { // Traps
            0 27 27 9; //  at 0x06FA
            57 86 86 9; //  at 0x0702
            116 143 143 9; //  at 0x070A
          } // end Traps
          [2] { // Attributes
            Attr(#30, 66) { // LineNumberTable at 0x070C
              [16] { // LineNumberTable
                0  24; //  at 0x0718
                17  25; //  at 0x071C
                27  26; //  at 0x0720
                28  27; //  at 0x0724
                40  28; //  at 0x0728
                57  33; //  at 0x072C
                76  34; //  at 0x0730
                86  35; //  at 0x0734
                87  36; //  at 0x0738
                99  37; //  at 0x073C
                116  42; //  at 0x0740
                133  43; //  at 0x0744
                143  44; //  at 0x0748
                144  45; //  at 0x074C
                156  46; //  at 0x0750
                173  49; //  at 0x0754
              }
            } // end LineNumberTable
            ;
            Attr(#33, 17) { // StackMapTable at 0x0754
              [6] { //
                91b, [1]z{7b,9}; // same_locals_1_stack_item_frame
                29b; // same_frame
                92b, [1]z{7b,9}; // same_locals_1_stack_item_frame
                29b; // same_frame
                90b, [1]z{7b,9}; // same_locals_1_stack_item_frame
                29b; // same_frame
              }
            } // end StackMapTable
          } // Attributes
        } // end Code
        ;
        Attr(#34, 4) { // Exceptions at 0x076B
          [1] { // Exceptions
            #35; //  at 0x0775
          }
        } // end Exceptions
      } // Attributes
    } // Member
  } // methods

  [3] { // Attributes
    Attr(#36, 2) { // SourceFile at 0x0777
      #37;
    } // end SourceFile
    ;
    Attr(#26, 18) { // InnerClasses at 0x0789
      [2] { // InnerClasses
        #24 #22 #25 281; //  at 0x0799
        #85 #88 #86 25; //  at 0x07A1
      }
    } // end InnerClasses
    ;
    Attr(#50, 8) { // BootstrapMethods at 0x07A1
      [1] { // bootstrap_methods
        {  //  bootstrap_method
          #51; // bootstrap_method_ref
          [1] { // bootstrap_arguments
            #52; //  at 0x07AF
          }  //  bootstrap_arguments
        }  //  bootstrap_method
      }
    } // end BootstrapMethods
  } // Attributes
} // end class WithFieldNoAccessTest
