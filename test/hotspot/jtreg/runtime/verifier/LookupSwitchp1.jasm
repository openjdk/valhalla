/*
 * Copyright (c) 2023, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

// This test generates a npairs that overflows int so lookupswitch is an invalid bytecode

public class LookupSwitchp1 version 50:0 {

public static Method runLookup:"()V"
	stack 4 locals 3
{
    iconst_0;
    bytecode 171; // lookupswitch
    bytecode 0,0; // padding
    bytecode 0,0,0,16; // default target == L17
    bytecode 0x80,0,0,0; // 0x80000000 npairs
    bytecode 0,0,0,0;    // one match-offset pair
    bytecode 0,0,0,16;   // also goes to target
    // incomplete npair table
  L17:
    iconst_0;
    ireturn;
}
}
