#
# Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

# This file contains error and warning messages related to XML Schema
# The messages are arranged in key and value tuples in a ListResourceBundle.

        BadMessageKey = 找不到對應訊息索引鍵的錯誤訊息。
        FormatFailed = 格式化下列訊息時發生內部錯誤:\n

# For internal use

        Internal-Error = 內部錯誤: {0}。
        dt-whitespace = 聯集 simpleType ''{0}'' 沒有可用的空格 Facet 值
        GrammarConflict = 從使用者文法集區中傳回的一個文法與其他文法衝突。

# Identity constraints

        AbsentKeyValue = cvc-identity-constraint.4.2.1.a: 元素 "{0}" 沒有金鑰 "{1}" 的值。
        DuplicateField = 範圍中的欄位 "{0}" 重複配對。
        DuplicateKey = cvc-identity-constraint.4.2.2: 替元素 "{1}" 的識別限制條件 "{2}" 宣告了重複的金鑰值 [{0}]。
        DuplicateUnique = cvc-identity-constraint.4.1: 替元素 "{1}" 的識別限制條件 "{2}" 宣告了重複的唯一值 [{0}]。
        FieldMultipleMatch = cvc-identity-constraint.3: 識別限制條件 "{1}" 的欄位 "{0}" 符合其選取器範圍內的多個值; 欄位必須符合唯一值。
        FixedDiffersFromActual = 此元素的內容不等於綱要元素宣告中 "fixed" 屬性的值。
        KeyMatchesNillable = cvc-identity-constraint.4.2.3: 元素 "{0}" 的金鑰 "{1}" 符合 nillable 設為 true 的元素。
        KeyNotEnoughValues = cvc-identity-constraint.4.2.1.b: 未替針對元素 "{0}" 指定的 <key name="{1}"> 識別限制條件指定足夠的值。
        KeyNotFound = cvc-identity-constraint.4.3: 找不到元素 ''{2}'' 識別限制條件之值為 ''{1}'' 的金鑰 ''{0}''。
        KeyRefOutOfScope = 識別限制條件錯誤: 識別限制條件 "{0}" 具有一個 keyref，它參照了範圍之外的金鑰或唯一值。
        KeyRefReferNotFound = 金鑰參照宣告 "{0}" 參照了名稱為 "{1}" 的不明金鑰。
        UnknownField = 內部識別限制條件錯誤; 替元素 "{1}" 指定了識別限制條件 "{2}" 的不明欄位 "{0}"。

# Ideally, we should only use the following error keys, not the ones under
# "Identity constraints". And we should cover all of the following errors.

#validation (3.X.4)

        cvc-attribute.3 = cvc-attribute.3: 元素 ''{0}'' 上屬性 ''{1}'' 的值 ''{2}'' 對於其類型 ''{3}'' 無效。
        cvc-attribute.4 = cvc-attribute.4: 元素 ''{0}'' 上屬性 ''{1}'' 的值 ''{2}'' 對於其固定 '{'value constraint'}' 無效。屬性必須具有 ''{3}'' 的值。
        cvc-complex-type.2.1 = cvc-complex-type.2.1: 元素 ''{0}'' 不能有字元或元素資訊項目 [children]，因為類型的內容類型為空白。
        cvc-complex-type.2.2 = cvc-complex-type.2.2: 元素 ''{0}'' 不能有元素 [children]，且值必須有效。
        cvc-complex-type.2.3 = cvc-complex-type.2.3: 元素 ''{0}'' 不能有字元 [children]，因為類型的內容類型為 element-only。
        cvc-complex-type.2.4.a = cvc-complex-type.2.4.a: 從元素 ''{0}'' 開始找到無效的內容。預期一個 ''{1}''。
        cvc-complex-type.2.4.b = cvc-complex-type.2.4.b: 元素 ''{0}'' 的內容不完整。預期一個 ''{1}''。
        cvc-complex-type.2.4.c = cvc-complex-type.2.4.c: 嚴格比對萬用字元，但是找不到元素 ''{0}'' 的宣告。
        cvc-complex-type.2.4.d = cvc-complex-type.2.4.d: 從元素 ''{0}'' 開始找到無效的內容。此處未預期子項元素。
        cvc-complex-type.2.4.d.1 = cvc-complex-type.2.4.d: 從元素 ''{0}'' 開始找到無效的內容。此處未預期子項元素 ''{1}''。
        cvc-complex-type.2.4.e = cvc-complex-type.2.4.e: ''{0}'' 在目前的序列中最多可以出現 ''{2}'' 次。已超過此限制。此處預期要有 ''{1}'' 其中之一。
        cvc-complex-type.2.4.f = cvc-complex-type.2.4.f: ''{0}'' 在目前的序列中最多可以出現 ''{1}'' 次。已超過此限制。此處不應有子項元素。
        cvc-complex-type.2.4.g = cvc-complex-type.2.4.g: 發現以元素 ''{0}'' 為開頭的無效內容。''{1}'' 在目前的序列中應該最少要出現 ''{2}'' 次。還需要再出現一次才能滿足此限制條件。
        cvc-complex-type.2.4.h = cvc-complex-type.2.4.h: 發現以元素 ''{0}'' 為開頭的無效內容。''{1}'' 在目前的序列中應該最少要出現 ''{2}'' 次。還需要再出現 ''{3}'' 次才能滿足此限制條件。
        cvc-complex-type.2.4.i = cvc-complex-type.2.4.i: 元素 ''{0}'' 的內容不完整。''{1}'' 應該最少要出現 ''{2}'' 次。還需要再出現一次才能滿足此限制條件。
        cvc-complex-type.2.4.j = cvc-complex-type.2.4.j: 元素 ''{0}'' 的內容不完整。''{1}'' 應該最少要出現 ''{2}'' 次。還需要再出現 ''{3}'' 次才能滿足此限制條件。
        cvc-complex-type.3.1 = cvc-complex-type.3.1: 元素 ''{0}'' 屬性 ''{1}'' 的值 ''{2}'' 對於屬性使用無效。屬性 ''{1}'' 具有 ''{3}'' 的固定值。
        cvc-complex-type.3.2.1 = cvc-complex-type.3.2.1: 元素 ''{0}'' 沒有屬性 ''{1}'' 的屬性萬用字元。
        cvc-complex-type.3.2.2 = cvc-complex-type.3.2.2: 不允許屬性 ''{1}'' 出現在元素 ''{0}'' 中。
        cvc-complex-type.4 = cvc-complex-type.4: 屬性 ''{1}'' 必須出現在元素 ''{0}'' 中。
        cvc-complex-type.5.1 = cvc-complex-type.5.1: 在元素 ''{0}'' 中，屬性 ''{1}'' 為 Wild ID。但是已經有一個 Wild ID ''{2}''。只能有一個 Wild ID。
        cvc-complex-type.5.2 = cvc-complex-type.5.2: 在元素 ''{0}'' 中，屬性 ''{1}'' 為 Wild ID。但是已經有一個從 '{'attribute uses'}' 中的 ID 衍生而來的屬性 ''{2}''。
        cvc-datatype-valid.1.2.1 = cvc-datatype-valid.1.2.1: ''{0}'' 不是 ''{1}'' 的有效值。
        cvc-datatype-valid.1.2.2 = cvc-datatype-valid.1.2.2: ''{0}'' 不是清單類型 ''{1}'' 的有效值。
        cvc-datatype-valid.1.2.3 = cvc-datatype-valid.1.2.3: ''{0}'' 不是聯集類型 ''{1}'' 的有效值。
        cvc-elt.1.a = cvc-elt.1.a: 找不到元素 ''{0}'' 的宣告。
        cvc-elt.1.b = cvc-elt.1.b: 元素的名稱不符合元素宣告的名稱。發現的是 ''{0}''。預期應為 ''{1}''。
        cvc-elt.2 = cvc-elt.2: ''{0}'' 元素宣告中 '{'abstract'}' 的值必須為偽。
        cvc-elt.3.1 = cvc-elt.3.1: 屬性 ''{1}'' 不可出現在元素 ''{0}'' 中，因為 ''{0}'' 的 '{'nillable'}' 屬性為偽。
        cvc-elt.3.2.1 = cvc-elt.3.2.1: 元素 ''{0}'' 不可有字元或元素資訊 [children]，因為指定了 ''{1}''。
        cvc-elt.3.2.2 = cvc-elt.3.2.2: 元素 ''{0}'' 不可有固定的 '{'value constraint'}'，因為指定了 ''{1}''。
        cvc-elt.4.1 = cvc-elt.4.1: 元素 ''{0}'' 屬性 ''{1}'' 的值 ''{2}'' 不是有效的 QName。
        cvc-elt.4.2 = cvc-elt.4.2: 無法將 ''{1}'' 解析為元素 ''{0}'' 的類型定義。
        cvc-elt.4.3 = cvc-elt.4.3: 類型 ''{1}'' 不是有效衍生自元素 ''{0}'' 的類型定義 ''{2}''。
        cvc-elt.5.1.1 = cvc-elt.5.1.1: 元素 ''{0}'' 的 '{'value constraint'}' ''{2}'' 不是類型 ''{1}'' 的有效預設值。
        cvc-elt.5.2.2.1 = cvc-elt.5.2.2.1: 元素 ''{0}'' 不可有元素資訊項目 [children]。
        cvc-elt.5.2.2.2.1 = cvc-elt.5.2.2.2.1: 元素 ''{0}'' 的值 ''{1}'' 不符合固定 '{'value constraint'}' 值 ''{2}''。
        cvc-elt.5.2.2.2.2 = cvc-elt.5.2.2.2.2: 元素 ''{0}'' 的值 ''{1}'' 不符合 '{'value constraint'}' 值 ''{2}''。
        cvc-enumeration-valid = cvc-enumeration-valid: 值 ''{0}'' 對於列舉 ''{1}'' 而言並非 facet-valid。它必須是來自列舉的值。
        cvc-fractionDigits-valid = cvc-fractionDigits-valid: 值 ''{0}'' 具有 {1} 分數位數，但是分數位數的數目限制為 {2}。
        cvc-id.1 = cvc-id.1: IDREF ''{0}'' 沒有 ID/IDREF 連結。
        cvc-id.2 = cvc-id.2: 有多個 ID 值 ''{0}''。
        cvc-id.3 = cvc-id.3: 識別限制條件 ''{0}'' 的欄位符合元素 ''{1}''，但是此元素沒有簡單類型。
        cvc-length-valid = cvc-length-valid: 長度 = ''{1}'' 的值 ''{0}'' 對於類型 ''{3}'' 長度 ''{2}'' 而言並非 facet-valid。
        cvc-maxExclusive-valid = cvc-maxExclusive-valid: 值 ''{0}'' 對於類型 ''{2}'' maxExclusive ''{1}'' 而言並非 facet-valid。
        cvc-maxInclusive-valid = cvc-maxInclusive-valid: 值 ''{0}'' 對於類型 ''{2}'' maxInclusive ''{1}'' 而言並非 facet-valid。
        cvc-maxLength-valid = cvc-maxLength-valid: 長度 = ''{1}'' 的值 ''{0}'' 對於類型 ''{3}'' maxLength ''{2}'' 而言並非 facet-valid。
        cvc-minExclusive-valid = cvc-minExclusive-valid: 值 ''{0}'' 對於類型 ''{2}'' minExclusive ''{1}'' 而言並非 facet-valid。
        cvc-minInclusive-valid = cvc-minInclusive-valid: 值 ''{0}'' 對於類型 ''{2}'' minInclusive ''{1}'' 而言並非 facet-valid。
        cvc-minLength-valid = cvc-minLength-valid: 長度 = ''{1}'' 的值 ''{0}'' 對於類型 ''{3}'' minLength ''{2}'' 而言並非 facet-valid。
        cvc-pattern-valid = cvc-pattern-valid: 值 ''{0}'' 對於類型 ''{2}'' 樣式 ''{1}'' 而言並非 facet-valid。
        cvc-totalDigits-valid = cvc-totalDigits-valid: 值 ''{0}'' 具有 {1} 總位數，但是總位數的數目限制為 {2}。
        cvc-type.1 = cvc-type.1: 找不到類型定義 ''{0}''。
        cvc-type.2 = cvc-type.2: 元素 {0} 的類型定義不可為抽象。
        cvc-type.3.1.1 = cvc-type.3.1.1: 元素 ''{0}'' 為簡單類型，因此不能有屬性，但不包括命名空間名稱等於 ''http://www.w3.org/2001/XMLSchema-instance'' 與 [local name] 為 ''type''、''nil''、''schemaLocation'' 或 ''noNamespaceSchemaLocation'' 其中之一者。不過，找到屬性 ''{1}''。
        cvc-type.3.1.2 = cvc-type.3.1.2: 元素 ''{0}'' 為簡單類型，因此不可有元素資訊項目 [children]。
        cvc-type.3.1.3 = cvc-type.3.1.3: 元素 ''{0}'' 的值 ''{1}'' 無效。

#schema valid (3.X.3)

        schema_reference.access = schema_reference: 無法讀取綱要文件 ''{0}''，因為 accessExternalSchema 屬性設定的限制，所以不允許 ''{1}'' 存取。
        schema_reference.4 = schema_reference.4: 無法讀取綱要文件 ''{0}''，因為 1) 找不到文件; 2) 無法讀取文件; 3) 文件的根元素不是 <xsd:schema>。
        src-annotation = src-annotation: <annotation> 元素僅能包含 <appinfo> 與 <documentation> 元素，但找到 ''{0}''。
        src-attribute.1 = src-attribute.1: 屬性 ''default'' 與 ''fixed'' 不可同時出現在屬性宣告 ''{0}'' 中。請只使用其中一個。
        src-attribute.2 = src-attribute.2: : 屬性 ''default'' 出現在屬性 ''{0}'' 中，因此 ''use'' 的值必須是 ''optional''。
        src-attribute.3.1 = src-attribute.3.1: 'ref' 或 'name' 其中之一必須出現在區域屬性宣告中。
        src-attribute.3.2 = src-attribute.3.2: 內容必須符合 (annotation?) 屬性參照 ''{0}''。
        src-attribute.4 = src-attribute.4: 屬性 ''{0}'' 同時具有 ''type'' 屬性與匿名 ''simpleType'' 子項。屬性僅允許其中之一。
        src-attribute_group.2 = src-attribute_group.2: 萬用字元的交集對於屬性群組 ''{0}'' 無法表示。
        src-attribute_group.3 = src-attribute_group.3: 屬性群組 ''{0}'' 偵測到循環定義。遞迴使用屬性群組參照將會回到本身。
        src-ct.1 = src-ct.1: 類型 ''{0}'' 的複雜類型定義表示錯誤。當使用 <complexContent> 時，基礎類型必須為 complexType。''{1}'' 為 simpleType。
        src-ct.2.1 = src-ct.2.1: 類型 ''{0}'' 的複雜類型定義表示錯誤。使用 <simpleContent> 時，基礎類型必須為 complexType，但其內容類型為簡單; 或者指定限制時，其內容為混合內容與可空白物件的複雜類型; 或者指定擴充套件時，其內容為簡單類型。''{1}'' 不符合這些條件。
        src-ct.2.2 = src-ct.2.2: 類型 ''{0}'' 的複雜類型定義表示錯誤。當具有 simpleContent 的 complexType 限制具有混合內容的 complexType 與可空白物件時，在 <restriction> 的子項當中必須有一個 <simpleType>。
        src-ct.4 = src-ct.4: 類型 ''{0}'' 的複雜類型定義表示錯誤。萬用字元的交集無法表示。
        src-ct.5 = src-ct.5: 類型 ''{0}'' 的複雜類型定義表示錯誤。萬用字元的聯集無法表示。
        src-element.1 = src-element.1: 屬性 ''default'' 與 ''fixed'' 不可同時出現在元素宣告 ''{0}'' 中。請只使用其中一個。
        src-element.2.1 = src-element.2.1: : 'ref' 或 'name' 其中之一必須出現在區域元素宣告中。
        src-element.2.2 = src-element.2.2: 由於 ''{0}'' 包含 ''ref'' 屬性，其內容必須符合 (annotation?)。不過，找到 ''{1}''。
        src-element.3 = src-element.3: 元素 ''{0}'' 同時具有 ''type'' 屬性與 ''anonymous type'' 子項。元素僅允許其中之一。
        src-import.1.1 = src-import.1.1: <import> 元素資訊項目的命名空間屬性 ''{0}'' 不可與它所存在綱要的 targetNamespace 相同。
        src-import.1.2 = src-import.1.2: 若命名空間屬性未出現在 <import> 元素資訊項目上，則包含的綱要必須有 targetNamespace。
        src-import.2 = src-import.2: 文件 ''{0}'' 的根元素必須具有命名空間名稱 ''http://www.w3.org/2001/XMLSchema'' 與區域名稱 ''schema''。
        src-import.3.1 = src-import.3.1: <import> 元素資訊項目的命名空間屬性 ''{0}'' 必須等於匯入文件的 targetNamespace 屬性 ''{1}''。
        src-import.3.2 = src-import.3.2: 找到沒有命名空間屬性的 <import> 元素資訊項目，因此，匯入的文件不能具有 targetNamespace 屬性。不過，在匯入的文件中找到 targetNamespace ''{1}''。
        src-include.1 = src-include.1: 文件 ''{0}'' 的根元素必須具有命名空間名稱 ''http://www.w3.org/2001/XMLSchema'' 與區域名稱 ''schema''。
        src-include.2.1 = src-include.2.1: 參照綱要的 targetNamespace (目前為 ''{1}'') 必須等於包含綱要的 targetNamespace (目前為 ''{0}'')。
        src-redefine.2 = src-redefine.2: 文件 ''{0}'' 的根元素必須具有命名空間名稱 ''http://www.w3.org/2001/XMLSchema'' 與區域名稱 ''schema''。
        src-redefine.3.1 = src-redefine.3.1: 參照綱要的 targetNamespace (目前為 ''{1}'') 必須等於重新定義綱要的 targetNamespace (目前為 ''{0}'')。
        src-redefine.5.a.a = src-redefine.5.a.a: 找不到 <simpleType> 非註解子項。<redefine> 元素的 <simpleType> 子項必須具有 <restriction> 子系與參照本身的 'base' 屬性。
        src-redefine.5.a.b = src-redefine.5.a.b: ''{0}'' 不是有效子項元素。<redefine> 元素的 <simpleType> 子項必須具有 <restriction> 子系與參照本身的 ''base'' 屬性。
        src-redefine.5.a.c = src-redefine.5.a.c: ''{0}'' 沒有參照重新定義元素 (''{1}'') 的 ''base'' 屬性。<redefine> 元素的 <simpleType> 子項必須具有 <restriction> 子系與參照本身的 ''base'' 屬性。
        src-redefine.5.b.a = src-redefine.5.b.a: 找不到 <complexType> 的非註解子項。<redefine> 元素的 <complexType> 子項必須具有 <extension> 或 <restriction> 子系與參照本身的 'base' 屬性。
        src-redefine.5.b.b = src-redefine.5.b.b: 找不到 <complexType> 的非註解孫系。<redefine> 元素的 <complexType> 子項必須具有 <extension> 或 <restriction> 子系與參照本身的 'base' 屬性。
        src-redefine.5.b.c = src-redefine.5.b.c: ''{0}'' 不是有效孫系元素。<redefine> 元素的 <complexType> 子項必須具有 <extension> 或 <restriction> 子系與參照本身的 ''base'' 屬性。
        src-redefine.5.b.d = src-redefine.5.b.d: ''{0}'' 沒有參照重新定義元素 (''{1}'') 的 ''base'' 屬性。<redefine> 元素的 <complexType> 子項必須具有 <extension> 或 <restriction> 子系與參照本身的 ''base'' 屬性。
        src-redefine.6.1.1 = src-redefine.6.1.1: 若 <redefine> 元素的群組子項包含參照本身的群組，它必須剛好只有 1 個; 此項有 ''{0}'' 個。
        src-redefine.6.1.2 = src-redefine.6.1.2: 包含重新定義群組參照的群組 ''{0}'' 必須具有 ''minOccurs'' = ''maxOccurs'' = 1。
        src-redefine.6.2.1 = src-redefine.6.2.1: 重新定義綱要中沒有群組具有符合 ''{0}'' 的名稱。
        src-redefine.6.2.2 = src-redefine.6.2.2: 群組 ''{0}'' 未適當限制它重新定義的群組; 違反限制條件:  ''{1}''。
        src-redefine.7.1 = src-redefine.7.1: 若 <redefine> 元素的 attributeGroup 子項包含參照本身的 attributeGroup，它必須剛好只有 1 個; 此項有 ''{0}'' 個。
        src-redefine.7.2.1 = src-redefine.7.2.1: 重新定義綱要中沒有 attributeGroup 具有符合 ''{0}'' 的名稱。
        src-redefine.7.2.2 = src-redefine.7.2.2: AttributeGroup ''{0}'' 未適當限制它重新定義的 AttributeGroup; 違反限制條件:  ''{1}''。
        src-resolve = src-resolve: 無法將名稱 ''{0}'' 解析為 ''{1}'' 元件。
        src-resolve.4.1 = src-resolve.4.1: 解析元件 ''{2}'' 時發生錯誤。偵測到 ''{2}'' 沒有命名空間，但是，從綱要文件 ''{0}'' 無法參照沒有目標命名空間的元件。若要讓 ''{2}'' 具有命名空間，可考慮提供前置碼。若不要讓 ''{2}'' 具有命名空間，則應將沒有 "namespace" 屬性的 ''import'' 新增至 ''{0}''。
        src-resolve.4.2 = src-resolve.4.2: 解析元件 ''{2}'' 時發生錯誤。偵測到 ''{2}'' 位於命名空間 ''{1}'' 中，但是，從綱要文件 ''{0}'' 無法參照此命名空間的元件。若此為不正確的命名空間，可考慮變更 ''{2}'' 的前置碼。若此為正確的命名空間，則應將適當的 ''import'' 標記新增至 ''{0}''。
        src-simple-type.2.a = src-simple-type.2.a: 找到 <restriction> 元素，在其 [children] 中同時有基礎 [attribute] 與 <simpleType> 元素。僅允許其中一項。
        src-simple-type.2.b = src-simple-type.2.b: 找到 <restriction> 元素，在其 [children] 中沒有基礎 [attribute]，也沒有 <simpleType> 元素。需要其中一項。
        src-simple-type.3.a = src-simple-type.3.a: 找到 <list> 元素，在其 [children] 中同時有 itemType [attribute] 與 <simpleType> 元素。僅允許其中一項。
        src-simple-type.3.b = src-simple-type.3.b: 找到 <list> 元素，在其 [children] 中沒有 itemType [attribute]，也沒有 <simpleType> 元素。需要其中一項。
        src-single-facet-value = src-single-facet-value: 定義 facet ''{0}'' 超過一次以上。
        src-union-memberTypes-or-simpleTypes = src-union-memberTypes-or-simpleTypes: <union> 元素在其 [children] 中，必須具有非空白 memberTypes [attribute] 或至少一個 <simpleType> 元素。

#constraint valid (3.X.6)

        ag-props-correct.2 = ag-props-correct.2: 屬性群組 ''{0}'' 的錯誤。重複屬性使用相同名稱且指定了目標命名空間。重複屬性使用的名稱為 ''{1}''。
        ag-props-correct.3 = ag-props-correct.3: 屬性群組 ''{0}'' 的錯誤。兩個屬性宣告 ''{1}'' 與 ''{2}'' 具有衍生自 ID 的類型。
        a-props-correct.2 = a-props-correct.2: 屬性 ''{0}'' 中的值限制條件值 ''{1}'' 無效。
        a-props-correct.3 = a-props-correct.3: 屬性 ''{0}'' 無法使用 ''fixed'' 或 ''default''，因為屬性的 '{'type definition'}' 為 ID，或衍生自 ID。
        au-props-correct.2 = au-props-correct.2: 在 ''{0}'' 的屬性宣告中，指定了 ''{1}'' 的固定值。因此，若參照 ''{0}'' 的屬性使用也具有 '{'value constraint'}'，它必須是固定值且值必須為 ''{1}''。
        cos-all-limited.1.2 = cos-all-limited.1.2: 'all' 模型群組必須出現在 '{'min occurs'}' = '{'max occurs'}' = 1 的物件中，且該物件必須是一對組成複雜類型定義之 '{'content type'}' 物件中的一部分。
        cos-all-limited.2 = cos-all-limited.2: ''all'' 模型群組中元素的 '{'max occurs'}' 必須是 0 或 1。元素 ''{1}'' 的值 ''{0}'' 無效。
        cos-applicable-facets = cos-applicable-facets: 類型 {1} 不允許 Facet ''{0}''。
        cos-ct-extends.1.1 = cos-ct-extends.1.1: 類型 ''{0}'' 是由擴充套件從類型 ''{1}'' 衍生。不過，''{1}'' 的 ''final'' 屬性禁止由擴充套件衍生。
        cos-ct-extends.1.4.3.2.2.1.a = cos-ct-extends.1.4.3.2.2.1.a: 衍生類型與其基礎的內容類型皆必須是混合類型或兩者皆是 element-only。類型 ''{0}'' 是 element-only，但其基礎類型則否。
        cos-ct-extends.1.4.3.2.2.1.b = cos-ct-extends.1.4.3.2.2.1.b: 衍生類型與其基礎的內容類型皆必須是混合類型或兩者皆是 element-only。類型 ''{0}'' 為混合類型，但其基礎類型則否。
        cos-element-consistent = cos-element-consistent: 類型 ''{0}'' 的錯誤。在模型群組中出現名稱 ''{1}''、不同類型的多個元素。
        cos-list-of-atomic = cos-list-of-atomic: 清單類型 ''{0}'' 的定義中，類型 ''{1}'' 是無效的清單元素類型，因為它不是單元類型 (''{1}'' 為清單類型，或包含清單的聯集類型)。
        cos-nonambig = cos-nonambig: {0} 與 {1} (或來自其替代群組的元素) 違反「唯一物件屬性」。依此綱要驗證期間，為這兩個物件建立了不確定性。
        cos-particle-restrict.a = cos-particle-restrict.a: 衍生物件為空白，則基礎物件不可為空白。
        cos-particle-restrict.b = cos-particle-restrict.b: 基礎物件為空白，但是衍生物件則否。
        cos-particle-restrict.2 = cos-particle-restrict.2: 禁止的物件限制: ''{0}''。
        cos-st-restricts.1.1 = cos-st-restricts.1.1: 類型 ''{1}'' 為單元類型，因此其 '{'base type definition'}' (''{0}'') 必須是單元簡單類型定義或內建的原始資料類型。
        cos-st-restricts.2.1 = cos-st-restricts.2.1: 清單類型 ''{0}'' 的定義中，類型 ''{1}'' 是無效的項目類型，因為它是清單類型，或包含清單的聯集類型。
        cos-st-restricts.2.3.1.1 = cos-st-restricts.2.3.1.1: '{'item type definition'}' 的 '{'final'}' 元件 ''{0}'' 包含 ''list''。這代表 ''{0}'' 無法作為清單類型 ''{1}'' 的項目類型。
        cos-st-restricts.3.3.1.1 = cos-st-restricts.3.3.1.1: '{'member type definitions'}' 的 '{'final'}' 元件 ''{0}'' 包含 ''union''。這代表 ''{0}'' 無法作為聯集類型 ''{1}'' 的成員類型。
        cos-valid-default.2.1 = cos-valid-default.2.1: 元素 ''{0}'' 具有值限制條件，且必須具有混合或簡單內容模型。
        cos-valid-default.2.2.2 = cos-valid-default.2.2.2: 由於元素 ''{0}'' 具有 '{'value constraint'}' 且其類型定義具有混合的 '{'content type'}'，因此 '{'content type'}' 的物件必須是可空白。
        c-props-correct.2 = c-props-correct.2: keyref ''{0}'' 與 key ''{1}'' 的 Fields 基數彼此必須相符。
        ct-props-correct.3 = ct-props-correct.3: 偵測到複雜類型 ''{0}'' 的循環定義。這代表 ''{0}'' 包含在自身類型階層中，這是一項錯誤。
        ct-props-correct.4 = ct-props-correct.4: 類型 ''{0}'' 的錯誤。重複屬性使用相同名稱且指定了目標命名空間。重複屬性使用的名稱為 ''{1}''。
        ct-props-correct.5 = ct-props-correct.5: 類型 ''{0}'' 的錯誤。兩個屬性宣告 ''{1}'' 與 ''{2}'' 具有衍生自 ID 的類型。
        derivation-ok-restriction.1 = derivation-ok-restriction.1: 類型 ''{0}'' 由限制從類型 ''{1}'' 衍生。不過，''{1}'' 具有 '{'final'}' 屬性，禁止由限制衍生。
        derivation-ok-restriction.2.1.1 = derivation-ok-restriction.2.1.1: 類型 ''{0}'' 的錯誤。此類型中使用 ''{1}'' 的屬性具有 ''use'' 值的 ''{2}''，這與基礎類型中使用符合屬性的 ''required'' 值不一致。
        derivation-ok-restriction.2.1.2 = derivation-ok-restriction.2.1.2: 類型 ''{0}'' 的錯誤。此類型中使用 ''{1}'' 的屬性具有類型 ''{2}''，這不是有效衍生自 ''{3}''，亦即基礎類型中使用符合屬性的類型。
        derivation-ok-restriction.2.1.3.a = derivation-ok-restriction.2.1.3.a: 類型 ''{0}'' 的錯誤。此類型中使用 ''{1}'' 的屬性具有未固定的有效值限制條件，而基礎類型中使用的符合屬性有效值限制條件為固定式。
        derivation-ok-restriction.2.1.3.b = derivation-ok-restriction.2.1.3.b: 類型 ''{0}'' 的錯誤。此類型中使用 ''{1}'' 的屬性具有 ''{2}'' 固定值的有效值限制條件，這與基礎類型中使用符合屬性的固定有效值限制條件 ''{3}'' 的值不一致。
        derivation-ok-restriction.2.2.a = derivation-ok-restriction.2.2.a: 類型 ''{0}'' 的錯誤。此類型中使用 ''{1}'' 的屬性在基礎類型中沒有使用符合的屬性，且基礎類型沒有萬用字元屬性。
        derivation-ok-restriction.2.2.b = derivation-ok-restriction.2.2.b: 類型 ''{0}'' 的錯誤。此類型中使用 ''{1}'' 的屬性在基礎類型中沒有使用符合的屬性，且基礎類型中的萬用字元不允許使用此屬性的命名空間 ''{2}''。
        derivation-ok-restriction.3 = derivation-ok-restriction.3: 類型 ''{0}'' 的錯誤。基礎類型中使用 ''{1}'' 的屬性 REQUIRED 為真，但是衍生類型中沒有使用符合的屬性。
        derivation-ok-restriction.4.1 = derivation-ok-restriction.4.1: 類型 ''{0}'' 的錯誤。衍生具有屬性萬用字元，但是基礎則否。
        derivation-ok-restriction.4.2 = derivation-ok-restriction.4.2: 類型 ''{0}'' 的錯誤。衍生中的萬用字元不是基礎中有效的萬用字元子集。
        derivation-ok-restriction.4.3 = derivation-ok-restriction.4.3: 類型 ''{0}'' 的錯誤。衍生 ({1}) 中萬用字元的處理作業內容比基礎 ({2}) 中的處理作業內容弱。
        derivation-ok-restriction.5.2.2.1 = derivation-ok-restriction.5.2.2.1: 類型 ''{0}'' 的錯誤。此類型的簡單內容類型 ''{1}'' 不是基礎的簡單內容類型 (''{2}'') 的有效限制。
        derivation-ok-restriction.5.3.2 = derivation-ok-restriction.5.3.2: 類型 ''{0}'' 的錯誤。此類型的內容類型為空白，但是基礎的內容類型 ''{1}'' 不是空白或不可為空白。
        derivation-ok-restriction.5.4.1.2 = derivation-ok-restriction.5.4.1.2: 類型 ''{0}'' 的錯誤。此類型的內容類型為混合類型，但是基礎的內容類型 ''{1}'' 則否。
        derivation-ok-restriction.5.4.2 = derivation-ok-restriction.5.4.2: 類型 ''{0}'' 的錯誤。類型的物件不是基礎物件的有效限制。
        enumeration-required-notation = enumeration-required-notation: 由 {2} ''{1}'' 使用的 NOTATION 類型 ''{0}''，必須具有列舉 facet 值，以指定此類型使用的表示法元素。
        enumeration-valid-restriction = enumeration-valid-restriction: 列舉值 ''{0}'' 不在基礎類型 {1} 的值空間中。
        e-props-correct.2 = e-props-correct.2: 元素 ''{0}'' 中的值限制條件值 ''{1}'' 無效。
        e-props-correct.4 = e-props-correct.4: 元素 ''{0}'' 的 '{'type definition'}' 不是有效衍生自 substitutionHead ''{1}'' 的 '{'type definition'}'，或是 ''{1}'' 的 '{'substitution group exclusions'}' 屬性不允許此衍生。
        e-props-correct.5 = e-props-correct.5: '{'value constraint'}' 不可出現在元素 ''{0}'' 上，因為元素的 '{'type definition'}' 或 '{'type definition'}' 的 '{'content type'}' 為 ID，或衍生自 ID。
        e-props-correct.6 = e-props-correct.6: 偵測到 ''{0}'' 的循環替代群組。
        fractionDigits-valid-restriction = fractionDigits-valid-restriction: 在 {2} 的定義中，facet ''fractionDigits'' 的值 ''{0}'' 無效，因為它必須小於或等於 ''fractionDigits'' 的值，此值以其中一個祖系類型設為 ''{1}''。
        fractionDigits-totalDigits = fractionDigits-totalDigits: 在 {2} 的定義中，facet ''fractionDigits'' 的值 ''{0}'' 無效，因為值必須小於或等於 ''totalDigits'' 的值，亦即 ''{1}''。
        length-minLength-maxLength.1.1 = length-minLength-maxLength.1.1: 針對類型 {0}，length ''{1}'' 的值小於 minLength ''{2}'' 的值是一項錯誤。
        length-minLength-maxLength.1.2.a = length-minLength-maxLength.1.2.a: 針對類型 {0}，若目前限制具有 minLength facet 且目前的限制或基礎具有 length facet，則基礎沒有 minLength facet 是一項錯誤。
        length-minLength-maxLength.1.2.b = length-minLength-maxLength.1.2.b: 針對類型 {0}，目前的 minLength ''{1}'' 不等於基礎 minLength ''{2}'' 是一項錯誤。
        length-minLength-maxLength.2.1 = length-minLength-maxLength.2.1: 針對類型 {0}，length ''{1}'' 的值大於 maxLength ''{2}'' 的值是一項錯誤。
        length-minLength-maxLength.2.2.a = length-minLength-maxLength.2.2.a: 針對類型 {0}，若目前的限制具有 maxLength facet，且目前的限制或基礎具有 length facet，則基礎沒有 maxLength facet 是一項錯誤。
        length-minLength-maxLength.2.2.b = length-minLength-maxLength.2.2.b: 針對類型 {0}，目前的 maxLength ''{1}'' 不等於基礎 maxLength ''{2}'' 是一項錯誤。
        length-valid-restriction = length-valid-restriction: 類型 ''{2}'' 的錯誤。等於 ''{0}'' 的 length 值必須等於基礎類型 ''{1}'' 的 length 值。
        maxExclusive-valid-restriction.1 = maxExclusive-valid-restriction.1: 類型 ''{2}'' 的錯誤。等於 ''{0}'' 的 maxExclusive 值必須小於或等於基礎類型 ''{1}'' 的 maxExclusive。
        maxExclusive-valid-restriction.2 = maxExclusive-valid-restriction.2: 類型 ''{2}'' 的錯誤。等於 ''{0}'' 的 maxExclusive 值必須小於或等於基礎類型 ''{1}'' 的 maxInclusive。
        maxExclusive-valid-restriction.3 = maxExclusive-valid-restriction.3: 類型 ''{2}'' 的錯誤。等於 ''{0}'' 的 maxExclusive 值必須大於基礎類型 ''{1}'' 的 minInclusive。
        maxExclusive-valid-restriction.4 = maxExclusive-valid-restriction.4: 類型 ''{2}'' 的錯誤。等於 ''{0}'' 的 maxExclusive 值必須大於基礎類型 ''{1}'' 的 minExclusive。
        maxInclusive-maxExclusive = maxInclusive-maxExclusive: 為相同資料類型同時指定 maxInclusive 與 maxExclusive 是一項錯誤。在 {2} 中，maxInclusive 等於 ''{0}'' 且 maxExclusive 等於 ''{1}''。
        maxInclusive-valid-restriction.1 = maxInclusive-valid-restriction.1: 類型 ''{2}'' 的錯誤。等於 ''{0}'' 的 maxInclusive 值必須小於或等於基礎類型 ''{1}'' 的 maxInclusive。
        maxInclusive-valid-restriction.2 = maxInclusive-valid-restriction.2: 類型 ''{2}'' 的錯誤。等於 ''{0}'' 的 maxInclusive 值必須小於基礎類型 ''{1}'' 的 maxExclusive。
        maxInclusive-valid-restriction.3 = maxInclusive-valid-restriction.3: 類型 ''{2}'' 的錯誤。等於 ''{0}'' 的 maxInclusive 值必須大於或等於基礎類型 ''{1}'' 的 minInclusive。
        maxInclusive-valid-restriction.4 = maxInclusive-valid-restriction.4: 類型 ''{2}'' 的錯誤。等於 ''{0}'' 的 maxInclusive 值必須大於基礎類型 ''{1}'' 的 minExclusive。
        maxLength-valid-restriction = maxLength-valid-restriction: 在 {2} 的定義中，等於 ''{0}'' 的 maxLength 值必須小於或等於基礎類型 ''{1}'' 的 maxLength 值。
        mg-props-correct.2 = mg-props-correct.2: 偵測到群組 ''{0}'' 的循環定義。遞迴使用物件的 '{'term'}' 值將導至其 '{'term'}' 為群組本身的物件。
        minExclusive-less-than-equal-to-maxExclusive = minExclusive-less-than-equal-to-maxExclusive: 在 {2} 的定義中，等於 ''{0}'' 的 minExclusive 值必須小於或等於 maxExclusive 值 (等於 ''{1}'')。
        minExclusive-less-than-maxInclusive = minExclusive-less-than-maxInclusive: 在 {2} 的定義中，等於 ''{0}'' 的 minExclusive 值必須小於 maxInclusive 值 (等於 ''{1}'')。
        minExclusive-valid-restriction.1 = minExclusive-valid-restriction.1: 類型 ''{2}'' 的錯誤。等於 ''{0}'' 的 minExclusive 值必須大於或等於基礎類型 ''{1}'' 的 minExclusive。
        minExclusive-valid-restriction.2 = minExclusive-valid-restriction.2: 類型 ''{2}'' 的錯誤。等於 ''{0}'' 的 minExclusive 值必須小於或等於基礎類型 ''{1}'' 的 maxInclusive。
        minExclusive-valid-restriction.3 = minExclusive-valid-restriction.3: 類型 ''{2}'' 的錯誤。等於 ''{0}'' 的 minExclusive 值必須大於或等於基礎類型 ''{1}'' 的 minInclusive。
        minExclusive-valid-restriction.4 = minExclusive-valid-restriction.4: 類型 ''{2}'' 的錯誤。等於 ''{0}'' 的 minExclusive 值必須小於基礎類型 ''{1}'' 的 maxExclusive。
        minInclusive-less-than-equal-to-maxInclusive = minInclusive-less-than-equal-to-maxInclusive: 在 {2} 的定義中，等於 ''{0}'' 的 minInclusive 值必須小於或等於 maxInclusive 值 (等於 ''{1}'')。
        minInclusive-less-than-maxExclusive = minInclusive-less-than-maxExclusive: 在 {2} 的定義中，等於 ''{0}'' 的 minInclusive 值必須小於 maxExclusive 值 (等於 ''{1}'')。
        minInclusive-minExclusive = minInclusive-minExclusive: 為相同資料類型同時指定 minInclusive 與 minExclusive 是一項錯誤。在 {2} minInclusive 等於 ''{0}'' 且 minExclusive 等於 ''{1}''。
        minInclusive-valid-restriction.1 = minInclusive-valid-restriction.1: 類型 ''{2}'' 的錯誤。等於 ''{0}'' 的 minInclusive 值必須大於或等於基礎類型 ''{1}'' 的 minInclusive。
        minInclusive-valid-restriction.2 = minInclusive-valid-restriction.2: 類型 ''{2}'' 的錯誤。等於 ''{0}'' 的 minInclusive 值必須小於或等於基礎類型 ''{1}'' 的 maxInclusive。
        minInclusive-valid-restriction.3 = minInclusive-valid-restriction.3: 類型 ''{2}'' 的錯誤。等於 ''{0}'' 的 minInclusive 值必須大於基礎類型 ''{1}'' 的 minExclusive。
        minInclusive-valid-restriction.4 = minInclusive-valid-restriction.4: 類型 ''{2}'' 的錯誤。等於 ''{0}'' 的 minInclusive 值必須小於基礎類型 ''{1}'' 的 maxExclusive。
        minLength-less-than-equal-to-maxLength = minLength-less-than-equal-to-maxLength: 在 {2} 的定義中，等於 ''{0}'' 的 minLength 值必須小於 maxLength 值 (等於 ''{1}'')。
        minLength-valid-restriction = minLength-valid-restriction: 在 {2} 的定義中，等於 ''{0}'' 的 minLength 必須大於或等於基礎類型 ''{1}'' 的 minLength。
        no-xmlns = no-xmlns: 屬性宣告的 {name} 不能與 'xmlns' 相同。
        no-xsi = no-xsi: 屬性宣告的 '{'target namespace'}' 不能與 ''{0}'' 相同。
        p-props-correct.2.1 = p-props-correct.2.1: 在 ''{0}'' 的宣告中，''minOccurs'' 的值為 ''{1}''，但是它不可大於 ''maxOccurs'' 的值 ''{2}''。
        rcase-MapAndSum.1 = rcase-MapAndSum.1: 物件之間沒有完整的功能對應。
        rcase-MapAndSum.2 = rcase-MapAndSum.2: 群組的發生範圍 ({0}，{1}) 不是基礎群組發生範圍 ({2}，{3}) 的有效限制。
        rcase-NameAndTypeOK.1 = rcase-NameAndTypeOK.1: 元素具有不相同的名稱與目標命名空間: 命名空間 ''{1}'' 中的元素 ''{0}'' 與命名空間 ''{3}'' 中的元素 ''{2}''。
        rcase-NameAndTypeOK.2 = rcase-NameAndTypeOK.2: 物件的 '{'term'}' 為元素宣告 ''{0}'' 的錯誤。元素宣告的 '{'nillable'}' 為真，但是基礎類型中的對應物件具有 '{'nillable'}' 為偽的元素宣告。
        rcase-NameAndTypeOK.3 = rcase-NameAndTypeOK.3: 物件的 '{'term'}' 為元素宣告 ''{0}'' 的錯誤。它的發生範圍 ({1}，{2}) 不是基礎類型中對應物件範圍 ({3}，{4}) 的有效限制。
        rcase-NameAndTypeOK.4.a = rcase-NameAndTypeOK.4.a: 元素 ''{0}'' 非固定式，但是基礎類型中對應的元素具有固定值 ''{1}''。
        rcase-NameAndTypeOK.4.b = rcase-NameAndTypeOK.4.b: 元素 ''{0}'' 具有固定值 ''{1}''，但是基礎類型中對應的元素具有固定值 ''{2}''。
        rcase-NameAndTypeOK.5 = rcase-NameAndTypeOK.5: 元素 ''{0}'' 的識別限制條件不是基礎中的子集。
        rcase-NameAndTypeOK.6 = rcase-NameAndTypeOK.6: 元素 ''{0}'' 不允許的替代不是基礎中的超集。
        rcase-NameAndTypeOK.7 = rcase-NameAndTypeOK.7: 元素 ''{0}'' 的類型 ''{1}'' 不是衍生自基礎元素 ''{2}'' 的類型。
        rcase-NSCompat.1 = rcase-NSCompat.1: 元素 ''{0}'' 具有基礎中萬用字元不允許的命名空間 ''{1}''。
        rcase-NSCompat.2 = rcase-NSCompat.2: 物件的 '{'term'}' 為元素宣告 ''{0}'' 的錯誤。它的發生範圍 ({1}，{2}) 不是基礎類型中對應物件範圍 ({3}，{4}) 的有效限制。
        rcase-NSRecurseCheckCardinality.1 = rcase-NSRecurseCheckCardinality.1: 物件之間沒有完整的功能對應。
        rcase-NSRecurseCheckCardinality.2 = rcase-NSRecurseCheckCardinality.2: 群組的發生範圍 ({0}，{1}) 不是基礎萬用字元範圍 ({2}，{3}) 的有效限制。
        rcase-NSSubset.1 = rcase-NSSubset.1: 萬用字元不是基礎中對應萬用字元的子集。
        rcase-NSSubset.2 = rcase-NSSubset.2: 萬用字元的發生範圍 ({0}，{1}) 不是基礎萬用字元範圍 ({2}，{3}) 的有效限制。
        rcase-NSSubset.3 = rcase-NSSubset.3: 萬用字元的處理作業內容 ''{0}'' 比基礎 ''{1}'' 中的處理作業內容弱。
        rcase-Recurse.1 = rcase-Recurse.1: 群組的發生範圍 ({0}，{1}) 不是基礎群組發生範圍 ({2}，{3}) 的有效限制。
        rcase-Recurse.2 = rcase-Recurse.2: 物件之間沒有完整的功能對應。
        rcase-RecurseLax.1 = rcase-RecurseLax.1: 群組的發生範圍 ({0}，{1}) 不是基礎群組發生範圍 ({2}，{3}) 的有效限制。
        rcase-RecurseLax.2 = rcase-RecurseLax.2: 物件之間沒有完整的功能對應。
        rcase-RecurseUnordered.1 = rcase-RecurseUnordered.1: 群組的發生範圍 ({0}，{1}) 不是基礎群組發生範圍 ({2}，{3}) 的有效限制。
        rcase-RecurseUnordered.2 = rcase-RecurseUnordered.2: 物件之間沒有完整的功能對應。
#        We're using sch-props-correct.2 instead of the old src-redefine.1
#        src-redefine.1 = src-redefine.1: The component ''{0}'' is begin redefined, but its corresponding component isn't in the schema document being redefined (with namespace ''{2}''), but in a different document, with namespace ''{1}''.
        sch-props-correct.2 = sch-props-correct.2: 綱要無法包含相同名稱的兩個全域元件; 此綱要包含兩個 ''{0}''。
        st-props-correct.2 = st-props-correct.2: 偵測到簡單類型 ''{0}'' 的循環定義。這代表 ''{0}'' 包含在自身類型階層中，這是一項錯誤。
        st-props-correct.3 = st-props-correct.3: 類型 ''{0}'' 的錯誤。'{'base type definition'}' 的 '{'final'}' 值 ''{1}'' 限制禁止衍生。
        totalDigits-valid-restriction = totalDigits-valid-restriction: 在 {2} 的定義中，facet ''totalDigits'' 的值 ''{0}'' 無效，因為它必須小於或等於 ''totalDigits'' 的值，此值以其中一個祖系類型設為 ''{1}''。
        whiteSpace-valid-restriction.1 = whiteSpace-valid-restriction.1: 在 {0} 的定義中，facet ''whitespace'' 的值 ''{1}'' 無效，因為 ''whitespace'' 的值以其中一個祖系類型設為 ''collapse''。
        whiteSpace-valid-restriction.2 = whiteSpace-valid-restriction.2: 在 {0} 的定義中，facet ''whitespace'' 的值 ''preserve'' 無效，因為 ''whitespace'' 的值在其中一個祖系類型中設為 ''replace''。

#schema for Schemas

        s4s-att-invalid-value = s4s-att-invalid-value: 元素 ''{0}'' 中 ''{1}'' 的屬性值無效。記錄的原因: {2}
        s4s-att-must-appear = s4s-att-must-appear: 屬性 ''{1}'' 必須出現在元素 ''{0}'' 中。
        s4s-att-not-allowed = s4s-att-not-allowed: 屬性 ''{1}'' 不可出現在元素 ''{0}'' 中。
        s4s-elt-invalid = s4s-elt-invalid: 元素 ''{0}'' 不是綱要文件中的有效元素。
        s4s-elt-must-match.1 = s4s-elt-must-match.1: ''{0}'' 的內容必須符合 {1}。從 {2} 開始出現問題。
        s4s-elt-must-match.2 = s4s-elt-must-match.2: ''{0}'' 的內容必須符合 {1}。找不到足夠的元素。
        # the "invalid-content" messages provide less information than the "must-match" counterparts above. They're used for complex types when providing a "match" would be an information dump
        s4s-elt-invalid-content.1 = s4s-elt-invalid-content.1: ''{0}'' 的內容無效。元素 ''{1}'' 無效、位置錯誤或太常出現。
        s4s-elt-invalid-content.2 = s4s-elt-invalid-content.2: ''{0}'' 的內容無效。元素 ''{1}'' 不可空白。
        s4s-elt-invalid-content.3 = s4s-elt-invalid-content.3: 類型 ''{0}'' 的元素不可出現在宣告之後，作為 <schema> 元素的子項。
        s4s-elt-schema-ns = s4s-elt-schema-ns: 元素 ''{0}'' 的命名空間必須來自綱要命名空間 ''http://www.w3.org/2001/XMLSchema''。
        s4s-elt-character = s4s-elt-character: 綱要元素中不允許非空白字元，但是 ''xs:appinfo'' 與 ''xs:documentation'' 除外。發現 ''{0}''。

# codes not defined by the spec

        c-fields-xpaths = c-fields-xpaths: 等於 ''{0}'' 的欄位值無效。
        c-general-xpath = c-general-xpath: 表示式 ''{0}'' 對於 XML 綱要支援的 XPath 子集而言無效。
        c-general-xpath-ns = c-general-xpath-ns: XPath 表示式 ''{0}'' 中的命名空間前置碼未連結命名空間。
        c-selector-xpath = c-selector-xpath: 等於 ''{0}'' 的選取器值無效; 選取器 xpaths 不能包含屬性。
        EmptyTargetNamespace = EmptyTargetNamespace: 在綱要文件 ''{0}'' 中，''targetNamespace'' 屬性的值不可為空白字串。
        FacetValueFromBase = FacetValueFromBase: 在類型 ''{0}'' 的宣告中，facet ''{2}'' 的值 ''{1}'' 必須來自基礎類型的值空間 ''{3}''。
        FixedFacetValue = FixedFacetValue: 在 {3} 的定義中，facet ''{0}'' 的值 ''{1}'' 無效，因為 ''{0}'' 的值以其中一個祖系類型設為 ''{2}''，且 '{'fixed'}' = true。
        InvalidRegex = InvalidRegex: 樣式值 ''{0}'' 不是有效的正規表示式。報告的錯誤: 位於資料欄 ''{2}'' 的 ''{1}''。
        MaxOccurLimit = 剖析器目前的組態不允許 maxOccurs 屬性值設為大於值 {0}。
        PublicSystemOnNotation = PublicSystemOnNotation: ''public'' 與 ''system'' 至少其中之一必須出現在元素 ''notation'' 中。
        SchemaLocation = 等於 ''{0}'' 的 SchemaLocation: schemaLocation 值必須具有偶數個 URI。
        TargetNamespace.1 = TargetNamespace.1: 預期命名空間 ''{0}''，但是綱要文件的目標命名空間為 ''{1}''。
        TargetNamespace.2 = TargetNamespace.2: 未預期命名空間，但是綱要文件具有目標命名空間 ''{1}''。
        UndeclaredEntity = UndeclaredEntity: 未宣告實體 ''{0}''。
        UndeclaredPrefix = UndeclaredPrefix: 無法解析 ''{0}'' 為 QName: 未宣告前置碼 ''{1}''。


# JAXP 1.2 schema source property errors

        jaxp12-schema-source-type.1 = ''http://java.sun.com/xml/jaxp/properties/schemaSource'' 屬性的值不能是 ''{0}'' 類型。支援的值類型為 String、File、InputStream、InputSource 或這些類型的陣列。
        jaxp12-schema-source-type.2 = ''http://java.sun.com/xml/jaxp/properties/schemaSource'' 屬性的陣列值不能是 ''{0}'' 類型。支援的陣列類型為 Object、String、File、InputStream 以及 InputSource。
        jaxp12-schema-source-ns = 如果使用 Object 陣列作為 'http://java.sun.com/xml/jaxp/properties/schemaSource' 屬性的值，就不能有兩個共用相同目標命名空間的綱要。
